{
  "nodes": {
    "SitePage /dev-404-page/": {
      "path": "/dev-404-page/",
      "id": "SitePage /dev-404-page/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f91d29e10ba680b413138cf9ed86e655",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin dev-404-page": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "id": "Plugin dev-404-page",
      "name": "dev-404-page",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createPagesStatefully"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "packageJson": {
        "name": "dev-404-page",
        "description": "Internal plugin to add a 404 page in development with helpful information",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "e7000fed1afd82a33b9bbf8f298b51c0",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin component-layout-creator": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/component-layout-creator",
      "id": "Plugin component-layout-creator",
      "name": "component-layout-creator",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createLayouts"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/component-layout-creator",
      "packageJson": {
        "name": "component-layout-creator",
        "description": "An internal Gatsby plugin that creates pages from component files in src/layouts",
        "version": "1.0.0",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "c1ab5ab5198a8c3079cfe8f02230c2f2",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin internal-data-bridge": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "id": "Plugin internal-data-bridge",
      "name": "internal-data-bridge",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "sourceNodes",
        "onCreatePage"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "packageJson": {
        "name": "internal-data-bridge",
        "description": "An internal Gatsby plugin which creates data nodes from internal data",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "b0954fe0d62493a4d25493f7e340e605",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin prod-404": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/prod-404",
      "id": "Plugin prod-404",
      "name": "prod-404",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreatePage"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/prod-404",
      "packageJson": {
        "name": "prod-404",
        "description": "Internal plugin to detect various flavors of 404 pages and ensure there's a 404.html path created as well to ensure compatability with static hosts",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "d401b1e1d05958d13e14f6230924af6c",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin query-runner": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/query-runner",
      "id": "Plugin query-runner",
      "name": "query-runner",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreatePage",
        "onCreateLayout"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby/dist/internal-plugins/query-runner",
      "packageJson": {
        "name": "query-runner",
        "description": "Internal plugin for running queries",
        "version": "1.0.0",
        "main": "index.js",
        "author": "",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "6943c7d8c8c125b40189e1520694b7c1",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-source-filesystem": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-source-filesystem",
      "id": "Plugin gatsby-source-filesystem",
      "name": "gatsby-source-filesystem",
      "version": "1.5.39",
      "pluginOptions": {
        "plugins": [],
        "name": "src",
        "path": "/Users/seanblanton/Documents/Sites/blanton/src/"
      },
      "nodeAPIs": [
        "sourceNodes",
        "setFieldsOnGraphQLNodeType"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-source-filesystem",
      "packageJson": {
        "name": "gatsby-source-filesystem",
        "description": "Gatsby plugin which parses files within a directory for further parsing by other plugins",
        "version": "1.5.39",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "better-queue",
            "version": "^3.8.7"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "chokidar",
            "version": "^1.7.0"
          },
          {
            "name": "fs-extra",
            "version": "^4.0.1"
          },
          {
            "name": "got",
            "version": "^7.1.0"
          },
          {
            "name": "md5-file",
            "version": "^3.1.1"
          },
          {
            "name": "mime",
            "version": "^1.3.6"
          },
          {
            "name": "pretty-bytes",
            "version": "^4.0.2"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          },
          {
            "name": "valid-url",
            "version": "^1.0.9"
          }
        ],
        "devDependencies": [
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.9.250"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "9ccd33d982fa2449fb97429b5f24d8a6",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-transformer-remark": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-transformer-remark",
      "id": "Plugin gatsby-transformer-remark",
      "name": "gatsby-transformer-remark",
      "version": "1.7.44",
      "pluginOptions": {
        "plugins": [
          {
            "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-remark-prismjs",
            "id": "Plugin gatsby-remark-prismjs",
            "name": "gatsby-remark-prismjs",
            "version": "2.0.5",
            "pluginOptions": {
              "plugins": [],
              "classPrefix": "language-",
              "inlineCodeMarker": "›",
              "aliases": {}
            },
            "nodeAPIs": [],
            "browserAPIs": [],
            "ssrAPIs": [],
            "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-remark-prismjs"
          }
        ]
      },
      "nodeAPIs": [
        "onCreateNode",
        "setFieldsOnGraphQLNodeType"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-transformer-remark",
      "packageJson": {
        "name": "gatsby-transformer-remark",
        "description": "Gatsby transformer plugin for Markdown using the Remark library and ecosystem",
        "version": "1.7.44",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "markdown",
          "remark"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "graphql-type-json",
            "version": "^0.1.4"
          },
          {
            "name": "gray-matter",
            "version": "^3.0.0"
          },
          {
            "name": "hast-util-raw",
            "version": "^2.0.2"
          },
          {
            "name": "hast-util-to-html",
            "version": "^3.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "mdast-util-to-hast",
            "version": "^2.4.0"
          },
          {
            "name": "mdast-util-toc",
            "version": "^2.0.1"
          },
          {
            "name": "remark",
            "version": "^7.0.1"
          },
          {
            "name": "remark-parse",
            "version": "^4.0.0"
          },
          {
            "name": "remark-retext",
            "version": "^3.1.0"
          },
          {
            "name": "remark-stringify",
            "version": "^4.0.0"
          },
          {
            "name": "retext-english",
            "version": "^3.0.0"
          },
          {
            "name": "sanitize-html",
            "version": "^1.14.1"
          },
          {
            "name": "underscore.string",
            "version": "^3.3.4"
          },
          {
            "name": "unified",
            "version": "^6.1.5"
          },
          {
            "name": "unist-util-remove-position",
            "version": "^1.1.1"
          },
          {
            "name": "unist-util-select",
            "version": "^1.5.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "babel-plugin-transform-object-rest-spread",
            "version": "^6.20.2"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "50da346942b68744cb1f10ad82b0babe",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-prismjs": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-remark-prismjs",
      "id": "Plugin gatsby-remark-prismjs",
      "name": "gatsby-remark-prismjs",
      "version": "2.0.5",
      "pluginOptions": {
        "plugins": [],
        "classPrefix": "language-",
        "inlineCodeMarker": "›",
        "aliases": {}
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-remark-prismjs",
      "packageJson": {
        "name": "gatsby-remark-prismjs",
        "description": "Adds syntax highlighting to code blocks at build time using PrismJS",
        "version": "2.0.5",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "prismjs",
          "remark"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "parse-numeric-range",
            "version": "0.0.2"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.3.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.1.3"
          },
          {
            "name": "prismjs",
            "version": "^1.13.0"
          },
          {
            "name": "remark",
            "version": "^7.0.1"
          }
        ],
        "peerDependencies": [
          {
            "name": "prismjs",
            "version": "^1.13.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "cc06680a7779100177a139ff361d72c7",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-react-helmet": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-react-helmet",
      "id": "Plugin gatsby-plugin-react-helmet",
      "name": "gatsby-plugin-react-helmet",
      "version": "2.0.11",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [
        "onRenderBody"
      ],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-react-helmet",
      "packageJson": {
        "name": "gatsby-plugin-react-helmet",
        "description": "Manage document head data with react-helmet. Provides drop-in server rendering support for Gatsby.",
        "version": "2.0.11",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "favicon",
          "react-helmet",
          "seo",
          "document",
          "head",
          "title",
          "meta",
          "link",
          "script",
          "base",
          "noscript",
          "style"
        ],
        "author": "Kyle Mathews <matthews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          },
          {
            "name": "react-helmet",
            "version": ">=5.1.3"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "ffe03bd127b8df920798a0cb8de5e60f",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-styled-components": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-styled-components",
      "id": "Plugin gatsby-plugin-styled-components",
      "name": "gatsby-plugin-styled-components",
      "version": "2.0.11",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "modifyBabelrc"
      ],
      "browserAPIs": [],
      "ssrAPIs": [
        "replaceRenderer"
      ],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-styled-components",
      "packageJson": {
        "name": "gatsby-plugin-styled-components",
        "description": "Gatsby plugin to add support for styled components",
        "version": "2.0.11",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "styled-components"
        ],
        "author": "Guten Ye <ywzhaifei@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          }
        ],
        "peerDependencies": [
          {
            "name": "babel-plugin-styled-components",
            "version": ">1.5.0"
          },
          {
            "name": "gatsby",
            "version": "^1.0.0"
          },
          {
            "name": "styled-components",
            "version": ">= 2.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "c517837ac721a56f5202c539c2169c9b",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-offline": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-offline",
      "id": "Plugin gatsby-plugin-offline",
      "name": "gatsby-plugin-offline",
      "version": "1.0.18",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createPages",
        "onPostBuild"
      ],
      "browserAPIs": [
        "registerServiceWorker"
      ],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-offline",
      "packageJson": {
        "name": "gatsby-plugin-offline",
        "description": "Gatsby plugin which sets up a site to be able to run offline",
        "version": "1.0.18",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "offline",
          "precache",
          "service-worker"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "sw-precache",
            "version": "^5.0.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "e85294d59120fc76a192dfe575366cc1",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-smartypants": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-remark-smartypants",
      "id": "Plugin gatsby-remark-smartypants",
      "name": "gatsby-remark-smartypants",
      "version": "1.4.12",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-remark-smartypants",
      "packageJson": {
        "name": "gatsby-remark-smartypants",
        "description": "Use retext-smartypants to auto-enhance typography of markdown",
        "version": "1.4.12",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "smartypants"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "retext",
            "version": "^4.0.0"
          },
          {
            "name": "retext-smartypants",
            "version": "^2.0.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "4fc98644e6692bd64f58e049b17b617e",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-sharp": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-sharp",
      "id": "Plugin gatsby-plugin-sharp",
      "name": "gatsby-plugin-sharp",
      "version": "2.0.20",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-sharp",
      "packageJson": {
        "name": "gatsby-plugin-sharp",
        "description": "Wrapper of the Sharp image manipulation library for Gatsby plugins",
        "version": "2.0.20",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "image",
          "sharp"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "@babel/runtime",
            "version": "^7.0.0"
          },
          {
            "name": "async",
            "version": "^2.1.2"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "fs-exists-cached",
            "version": "^1.0.0"
          },
          {
            "name": "fs-extra",
            "version": "^7.0.0"
          },
          {
            "name": "imagemin",
            "version": "^6.0.0"
          },
          {
            "name": "imagemin-mozjpeg",
            "version": "^8.0.0"
          },
          {
            "name": "imagemin-pngquant",
            "version": "^6.0.0"
          },
          {
            "name": "imagemin-webp",
            "version": "^5.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.10"
          },
          {
            "name": "mini-svg-data-uri",
            "version": "^1.0.0"
          },
          {
            "name": "potrace",
            "version": "^2.1.1"
          },
          {
            "name": "probe-image-size",
            "version": "^4.0.0"
          },
          {
            "name": "progress",
            "version": "^1.1.8"
          },
          {
            "name": "sharp",
            "version": "^0.21.3"
          },
          {
            "name": "svgo",
            "version": "^0.7.2"
          }
        ],
        "devDependencies": [
          {
            "name": "@babel/cli",
            "version": "^7.0.0"
          },
          {
            "name": "@babel/core",
            "version": "^7.0.0"
          },
          {
            "name": "babel-preset-gatsby-package",
            "version": "^0.1.3"
          },
          {
            "name": "cross-env",
            "version": "^5.1.4"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^2.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "2081cb75c7b660aabeecb2cebcba8abf",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-sitemap": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-sitemap",
      "id": "Plugin gatsby-plugin-sitemap",
      "name": "gatsby-plugin-sitemap",
      "version": "1.2.25",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onPostBuild"
      ],
      "browserAPIs": [],
      "ssrAPIs": [
        "onRenderBody"
      ],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-sitemap",
      "packageJson": {
        "name": "gatsby-plugin-sitemap",
        "description": "Gatsby plugin that automatically creates a sitemap for your site",
        "version": "1.2.25",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Nicholas Young &lt;nicholas@nicholaswyoung.com&gt;",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "minimatch",
            "version": "^3.0.4"
          },
          {
            "name": "sitemap",
            "version": "^1.12.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "c769bde3db14d09223822c392ec2cd8c",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-google-analytics": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-google-analytics",
      "id": "Plugin gatsby-plugin-google-analytics",
      "name": "gatsby-plugin-google-analytics",
      "version": "1.0.31",
      "pluginOptions": {
        "plugins": [],
        "trackingId": "UA-29141738-1",
        "head": false,
        "anonymize": true,
        "respectDNT": true
      },
      "nodeAPIs": [],
      "browserAPIs": [
        "onRouteUpdate"
      ],
      "ssrAPIs": [
        "onRenderBody"
      ],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-google-analytics",
      "packageJson": {
        "name": "gatsby-plugin-google-analytics",
        "description": "Gatsby plugin to add google analytics onto a site",
        "version": "1.0.31",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "google analytics"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "579459480bf1c565e6edd6b8530d4da6",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-nprogress": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-nprogress",
      "id": "Plugin gatsby-plugin-nprogress",
      "name": "gatsby-plugin-nprogress",
      "version": "1.0.14",
      "pluginOptions": {
        "plugins": [],
        "color": "#0ebcc7",
        "showSpinner": false
      },
      "nodeAPIs": [],
      "browserAPIs": [
        "onClientEntry"
      ],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-nprogress",
      "packageJson": {
        "name": "gatsby-plugin-nprogress",
        "description": "Shows page loading indicator when loading page resources is delayed",
        "version": "1.0.14",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews<mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "nprogress",
            "version": "^0.2.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "5ac7daa12f0827468cdab57b364e14e5",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-favicon": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-favicon",
      "id": "Plugin gatsby-plugin-favicon",
      "name": "gatsby-plugin-favicon",
      "version": "2.1.1",
      "pluginOptions": {
        "plugins": [],
        "logo": "./src/favicon.png",
        "injectHTML": true,
        "icons": {
          "android": true,
          "appleIcon": true,
          "appleStartup": true,
          "coast": false,
          "favicons": true,
          "firefox": true,
          "twitter": false,
          "yandex": false,
          "windows": false
        }
      },
      "nodeAPIs": [
        "modifyWebpackConfig"
      ],
      "browserAPIs": [],
      "ssrAPIs": [
        "onRenderBody"
      ],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-favicon",
      "packageJson": {
        "name": "gatsby-plugin-favicon",
        "description": "Gatsby plugin to add favicon for all configurations",
        "version": "2.1.1",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "favicon"
        ],
        "author": "Julien Blatecky <julien.blatecky@creatiwity.net>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "favicons-webpack-plugin",
            "version": "0.0.7"
          },
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "babel-plugin-transform-object-rest-spread",
            "version": "^6.26.0"
          },
          {
            "name": "babel-preset-env",
            "version": "^1.6.1"
          },
          {
            "name": "babel-preset-react",
            "version": "^6.24.1"
          },
          {
            "name": "cross-env",
            "version": "^5.1.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "97ff7a261263ea8071d2e6dd7869fa12",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin default-site-plugin": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton",
      "id": "Plugin default-site-plugin",
      "name": "default-site-plugin",
      "version": "a0bf55ef449a6393eb54388b271db9b9",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreateNode",
        "createPages"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton",
      "packageJson": {
        "name": "blanton",
        "description": "Sean Blanton portfolio site",
        "version": "3.0.0",
        "keywords": [
          "gatsby"
        ],
        "author": "Sean Blanton",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-plugin-styled-components",
            "version": "^1.5.1"
          },
          {
            "name": "gatsby",
            "version": "^1.9.247"
          },
          {
            "name": "gatsby-link",
            "version": "^1.6.40"
          },
          {
            "name": "gatsby-plugin-favicon",
            "version": "^2.1.1"
          },
          {
            "name": "gatsby-plugin-google-analytics",
            "version": "^1.0.31"
          },
          {
            "name": "gatsby-plugin-nprogress",
            "version": "^1.0.14"
          },
          {
            "name": "gatsby-plugin-offline",
            "version": "^1.0.16"
          },
          {
            "name": "gatsby-plugin-react-helmet",
            "version": "^2.0.10"
          },
          {
            "name": "gatsby-plugin-sharp",
            "version": "^2.0.20"
          },
          {
            "name": "gatsby-plugin-sitemap",
            "version": "^1.2.23"
          },
          {
            "name": "gatsby-plugin-styled-components",
            "version": "^2.0.11"
          },
          {
            "name": "gatsby-remark-component",
            "version": "^1.1.3"
          },
          {
            "name": "gatsby-remark-copy-images",
            "version": "^0.2.1"
          },
          {
            "name": "gatsby-remark-images",
            "version": "^3.0.3"
          },
          {
            "name": "gatsby-remark-prismjs",
            "version": "^2.0.2"
          },
          {
            "name": "gatsby-remark-smartypants",
            "version": "^1.4.12"
          },
          {
            "name": "gatsby-source-filesystem",
            "version": "^1.5.36"
          },
          {
            "name": "gatsby-transformer-remark",
            "version": "^1.7.41"
          },
          {
            "name": "prismjs",
            "version": "^1.14.0"
          },
          {
            "name": "react-helmet",
            "version": "^5.2.0"
          },
          {
            "name": "styled-components",
            "version": "^3.2.6"
          }
        ],
        "devDependencies": [
          {
            "name": "loader-utils",
            "version": "^1.1.0"
          },
          {
            "name": "prettier",
            "version": "^1.12.0"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "dff2996d2afa4d10ce41a56070871cbe",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-page-creator": {
      "resolve": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-page-creator",
      "id": "Plugin gatsby-plugin-page-creator",
      "name": "gatsby-plugin-page-creator",
      "version": "1.0.1",
      "pluginOptions": {
        "plugins": [],
        "path": "/Users/seanblanton/Documents/Sites/blanton/src/pages",
        "pathCheck": false
      },
      "nodeAPIs": [
        "createPagesStatefully"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-page-creator",
      "packageJson": {
        "name": "gatsby-plugin-page-creator",
        "description": "Gatsby plugin that automatically creates pages from React components in specified directories",
        "version": "1.0.1",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "chokidar",
            "version": "^1.7.0"
          },
          {
            "name": "glob",
            "version": "^7.1.1"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "parse-filepath",
            "version": "^1.0.1"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "de1b2a79cd91890255f7124b042b981a",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Site": {
      "siteMetadata": {
        "title": "Sean Blanton",
        "description": "Sean Blanton is a Product Designer living in Seattle, Washington building design systems and tools at Facebook.",
        "siteUrl": "https://www.sean-blanton.com"
      },
      "pathPrefix": "",
      "polyfill": true,
      "buildTime": "2019-02-13T02:02:40.697Z",
      "id": "Site",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "ee80243f4ece37f3d51b17949debb81f",
        "type": "Site",
        "owner": "internal-data-bridge"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/ absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/ absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "205d01da3a319c8603b575062d49c264",
        "type": "Directory",
        "description": "Directory \"src\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/",
      "relativePath": "",
      "extension": "",
      "size": 340,
      "prettySize": "340 B",
      "modifiedTime": "2019-02-13T00:49:59.000Z",
      "accessTime": "2019-02-13T02:02:46.000Z",
      "changeTime": "2019-02-13T00:49:59.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton",
      "base": "src",
      "ext": "",
      "name": "src",
      "relativeDirectory": "..",
      "dev": 16777220,
      "mode": 16877,
      "nlink": 10,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198641,
      "blocks": 0,
      "atimeMs": 1550023366000,
      "mtimeMs": 1550018999000,
      "ctimeMs": 1550018999000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T02:02:46.000Z",
      "mtime": "2019-02-13T00:49:59.000Z",
      "ctime": "2019-02-13T00:49:59.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/components absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/components absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "891f941454a61a4d17067411a2ddb09c",
        "type": "Directory",
        "description": "Directory \"src/components\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/components",
      "relativePath": "components",
      "extension": "",
      "size": 170,
      "prettySize": "170 B",
      "modifiedTime": "2019-02-13T00:49:59.000Z",
      "accessTime": "2019-02-13T02:02:46.000Z",
      "changeTime": "2019-02-13T00:49:59.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src",
      "base": "components",
      "ext": "",
      "name": "components",
      "relativeDirectory": "",
      "dev": 16777220,
      "mode": 16877,
      "nlink": 5,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198642,
      "blocks": 0,
      "atimeMs": 1550023366000,
      "mtimeMs": 1550018999000,
      "ctimeMs": 1550018999000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T02:02:46.000Z",
      "mtime": "2019-02-13T00:49:59.000Z",
      "ctime": "2019-02-13T00:49:59.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/layouts absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/layouts absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "ffad11600fd86617a60d00e1cea56cbe",
        "type": "Directory",
        "description": "Directory \"src/layouts\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/layouts",
      "relativePath": "layouts",
      "extension": "",
      "size": 102,
      "prettySize": "102 B",
      "modifiedTime": "2019-02-13T00:49:59.000Z",
      "accessTime": "2019-02-13T02:02:46.000Z",
      "changeTime": "2019-02-13T00:49:59.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src",
      "base": "layouts",
      "ext": "",
      "name": "layouts",
      "relativeDirectory": "",
      "dev": 16777220,
      "mode": 16877,
      "nlink": 3,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198648,
      "blocks": 0,
      "atimeMs": 1550023366000,
      "mtimeMs": 1550018999000,
      "ctimeMs": 1550018999000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T02:02:46.000Z",
      "mtime": "2019-02-13T00:49:59.000Z",
      "ctime": "2019-02-13T00:49:59.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/pages absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/pages absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "edbddca20ca8969ba245bb09c9e24da4",
        "type": "Directory",
        "description": "Directory \"src/pages\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/pages",
      "relativePath": "pages",
      "extension": "",
      "size": 136,
      "prettySize": "136 B",
      "modifiedTime": "2019-02-13T00:46:44.000Z",
      "accessTime": "2019-02-13T02:02:46.000Z",
      "changeTime": "2019-02-13T00:46:44.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src",
      "base": "pages",
      "ext": "",
      "name": "pages",
      "relativeDirectory": "",
      "dev": 16777220,
      "mode": 16877,
      "nlink": 4,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198650,
      "blocks": 0,
      "atimeMs": 1550023366000,
      "mtimeMs": 1550018804000,
      "ctimeMs": 1550018804000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T02:02:46.000Z",
      "mtime": "2019-02-13T00:46:44.000Z",
      "ctime": "2019-02-13T00:46:44.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "faa2a971a90df1145fc214e41594f577",
        "type": "Directory",
        "description": "Directory \"src/posts\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "relativePath": "posts",
      "extension": "",
      "size": 408,
      "prettySize": "408 B",
      "modifiedTime": "2019-02-13T01:03:15.000Z",
      "accessTime": "2019-02-13T02:02:46.000Z",
      "changeTime": "2019-02-13T01:03:15.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src",
      "base": "posts",
      "ext": "",
      "name": "posts",
      "relativeDirectory": "",
      "dev": 16777220,
      "mode": 16877,
      "nlink": 12,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198653,
      "blocks": 0,
      "atimeMs": 1550023366000,
      "mtimeMs": 1550019795000,
      "ctimeMs": 1550019795000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T02:02:46.000Z",
      "mtime": "2019-02-13T01:03:15.000Z",
      "ctime": "2019-02-13T01:03:15.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/templates absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/templates absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a51341259ae4090fe0bd228e3a9e2055",
        "type": "Directory",
        "description": "Directory \"src/templates\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/templates",
      "relativePath": "templates",
      "extension": "",
      "size": 102,
      "prettySize": "102 B",
      "modifiedTime": "2019-02-13T00:46:44.000Z",
      "accessTime": "2019-02-13T02:02:46.000Z",
      "changeTime": "2019-02-13T00:46:44.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src",
      "base": "templates",
      "ext": "",
      "name": "templates",
      "relativeDirectory": "",
      "dev": 16777220,
      "mode": 16877,
      "nlink": 3,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198663,
      "blocks": 0,
      "atimeMs": 1550023366000,
      "mtimeMs": 1550018804000,
      "ctimeMs": 1550018804000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T02:02:46.000Z",
      "mtime": "2019-02-13T00:46:44.000Z",
      "ctime": "2019-02-13T00:46:44.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/themes absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/themes absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1da41aadfbcac18c483ee7ba4bc5ce17",
        "type": "Directory",
        "description": "Directory \"src/themes\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/themes",
      "relativePath": "themes",
      "extension": "",
      "size": 102,
      "prettySize": "102 B",
      "modifiedTime": "2019-02-13T00:49:59.000Z",
      "accessTime": "2019-02-13T02:02:46.000Z",
      "changeTime": "2019-02-13T00:49:59.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src",
      "base": "themes",
      "ext": "",
      "name": "themes",
      "relativeDirectory": "",
      "dev": 16777220,
      "mode": 16877,
      "nlink": 3,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198665,
      "blocks": 0,
      "atimeMs": 1550023366000,
      "mtimeMs": 1550018999000,
      "ctimeMs": 1550018999000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T02:02:46.000Z",
      "mtime": "2019-02-13T00:49:59.000Z",
      "ctime": "2019-02-13T00:49:59.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/components/MarkdownBody.js absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/components/MarkdownBody.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a03cdeb62611b99cef875a4161ce947a",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/components/MarkdownBody.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/components/MarkdownBody.js",
      "relativePath": "components/MarkdownBody.js",
      "extension": "js",
      "size": 2727,
      "prettySize": "2.73 kB",
      "modifiedTime": "2019-02-13T01:57:39.000Z",
      "accessTime": "2019-02-13T01:57:39.000Z",
      "changeTime": "2019-02-13T01:57:39.000Z",
      "birthTime": "2019-02-13T00:49:59.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/components",
      "base": "MarkdownBody.js",
      "ext": ".js",
      "name": "MarkdownBody",
      "relativeDirectory": "components",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57232177,
      "blocks": 8,
      "atimeMs": 1550023059000,
      "mtimeMs": 1550023059000,
      "ctimeMs": 1550023059000,
      "birthtimeMs": 1550018999000,
      "atime": "2019-02-13T01:57:39.000Z",
      "mtime": "2019-02-13T01:57:39.000Z",
      "ctime": "2019-02-13T01:57:39.000Z",
      "birthtime": "2019-02-13T00:49:59.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/config.js absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/config.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "23c3d17758e7e2e8c31bdf66eb36f289",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/config.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/config.js",
      "relativePath": "config.js",
      "extension": "js",
      "size": 1273,
      "prettySize": "1.27 kB",
      "modifiedTime": "2019-02-13T00:49:59.000Z",
      "accessTime": "2019-02-13T01:44:05.000Z",
      "changeTime": "2019-02-13T00:49:59.000Z",
      "birthTime": "2019-02-13T00:49:59.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src",
      "base": "config.js",
      "ext": ".js",
      "name": "config",
      "relativeDirectory": "",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57232179,
      "blocks": 8,
      "atimeMs": 1550022245000,
      "mtimeMs": 1550018999000,
      "ctimeMs": 1550018999000,
      "birthtimeMs": 1550018999000,
      "atime": "2019-02-13T01:44:05.000Z",
      "mtime": "2019-02-13T00:49:59.000Z",
      "ctime": "2019-02-13T00:49:59.000Z",
      "birthtime": "2019-02-13T00:49:59.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/components/StyledLink.js absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/components/StyledLink.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e55fadfefea9a559d5271cec7f7aae72",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/components/StyledLink.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/components/StyledLink.js",
      "relativePath": "components/StyledLink.js",
      "extension": "js",
      "size": 465,
      "prettySize": "465 B",
      "modifiedTime": "2019-02-13T00:46:44.000Z",
      "accessTime": "2019-02-13T01:44:03.000Z",
      "changeTime": "2019-02-13T00:46:44.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/components",
      "base": "StyledLink.js",
      "ext": ".js",
      "name": "StyledLink",
      "relativeDirectory": "components",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198644,
      "blocks": 8,
      "atimeMs": 1550022243000,
      "mtimeMs": 1550018804000,
      "ctimeMs": 1550018804000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T01:44:03.000Z",
      "mtime": "2019-02-13T00:46:44.000Z",
      "ctime": "2019-02-13T00:46:44.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/layouts/index.js absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/layouts/index.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "247fed1b89c9b3d0754b9a812b452325",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/layouts/index.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/layouts/index.js",
      "relativePath": "layouts/index.js",
      "extension": "js",
      "size": 1717,
      "prettySize": "1.72 kB",
      "modifiedTime": "2019-02-13T00:49:59.000Z",
      "accessTime": "2019-02-13T01:44:03.000Z",
      "changeTime": "2019-02-13T00:49:59.000Z",
      "birthTime": "2019-02-13T00:49:59.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/layouts",
      "base": "index.js",
      "ext": ".js",
      "name": "index",
      "relativeDirectory": "layouts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57232180,
      "blocks": 8,
      "atimeMs": 1550022243000,
      "mtimeMs": 1550018999000,
      "ctimeMs": 1550018999000,
      "birthtimeMs": 1550018999000,
      "atime": "2019-02-13T01:44:03.000Z",
      "mtime": "2019-02-13T00:49:59.000Z",
      "ctime": "2019-02-13T00:49:59.000Z",
      "birthtime": "2019-02-13T00:49:59.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/components/Text.js absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/components/Text.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "d3d60e3d0d49bdc5ee55fb996480ec4b",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/components/Text.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/components/Text.js",
      "relativePath": "components/Text.js",
      "extension": "js",
      "size": 1826,
      "prettySize": "1.83 kB",
      "modifiedTime": "2019-02-13T00:49:59.000Z",
      "accessTime": "2019-02-13T01:44:03.000Z",
      "changeTime": "2019-02-13T00:49:59.000Z",
      "birthTime": "2019-02-13T00:49:59.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/components",
      "base": "Text.js",
      "ext": ".js",
      "name": "Text",
      "relativeDirectory": "components",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57232178,
      "blocks": 8,
      "atimeMs": 1550022243000,
      "mtimeMs": 1550018999000,
      "ctimeMs": 1550018999000,
      "birthtimeMs": 1550018999000,
      "atime": "2019-02-13T01:44:03.000Z",
      "mtime": "2019-02-13T00:49:59.000Z",
      "ctime": "2019-02-13T00:49:59.000Z",
      "birthtime": "2019-02-13T00:49:59.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/pages/index.js absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/pages/index.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "ff9a6c836e1b170fd4dae87330d9d01c",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/index.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/pages/index.js",
      "relativePath": "pages/index.js",
      "extension": "js",
      "size": 1093,
      "prettySize": "1.09 kB",
      "modifiedTime": "2019-02-13T00:46:44.000Z",
      "accessTime": "2019-02-13T01:44:02.000Z",
      "changeTime": "2019-02-13T00:46:44.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/pages",
      "base": "index.js",
      "ext": ".js",
      "name": "index",
      "relativeDirectory": "pages",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198652,
      "blocks": 8,
      "atimeMs": 1550022242000,
      "mtimeMs": 1550018804000,
      "ctimeMs": 1550018804000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T01:44:02.000Z",
      "mtime": "2019-02-13T00:46:44.000Z",
      "ctime": "2019-02-13T00:46:44.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1a65397ad3da783bf06a351dcecb80bf",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/making-susy-grids-atomic.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md",
      "relativePath": "posts/making-susy-grids-atomic.md",
      "extension": "md",
      "size": 1911,
      "prettySize": "1.91 kB",
      "modifiedTime": "2019-02-13T00:48:58.000Z",
      "accessTime": "2019-02-13T01:43:53.000Z",
      "changeTime": "2019-02-13T00:48:58.000Z",
      "birthTime": "2019-02-13T00:48:58.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "making-susy-grids-atomic.md",
      "ext": ".md",
      "name": "making-susy-grids-atomic",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57231801,
      "blocks": 8,
      "atimeMs": 1550022233000,
      "mtimeMs": 1550018938000,
      "ctimeMs": 1550018938000,
      "birthtimeMs": 1550018938000,
      "atime": "2019-02-13T01:43:53.000Z",
      "mtime": "2019-02-13T00:48:58.000Z",
      "ctime": "2019-02-13T00:48:58.000Z",
      "birthtime": "2019-02-13T00:48:58.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b20c368c25447b96a3c1caaf0c38fe45",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/fiction-writing-for-designers.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md",
      "relativePath": "posts/fiction-writing-for-designers.md",
      "extension": "md",
      "size": 5001,
      "prettySize": "5 kB",
      "modifiedTime": "2019-02-13T00:48:58.000Z",
      "accessTime": "2019-02-13T01:43:53.000Z",
      "changeTime": "2019-02-13T00:48:58.000Z",
      "birthTime": "2019-02-13T00:48:58.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "fiction-writing-for-designers.md",
      "ext": ".md",
      "name": "fiction-writing-for-designers",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57231802,
      "blocks": 16,
      "atimeMs": 1550022233000,
      "mtimeMs": 1550018938000,
      "ctimeMs": 1550018938000,
      "birthtimeMs": 1550018938000,
      "atime": "2019-02-13T01:43:53.000Z",
      "mtime": "2019-02-13T00:48:58.000Z",
      "ctime": "2019-02-13T00:48:58.000Z",
      "birthtime": "2019-02-13T00:48:58.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/pages/404.js absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/pages/404.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "83445eb8665b496900366a5549ce1d22",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/404.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/pages/404.js",
      "relativePath": "pages/404.js",
      "extension": "js",
      "size": 522,
      "prettySize": "522 B",
      "modifiedTime": "2019-02-13T00:46:44.000Z",
      "accessTime": "2019-02-13T01:44:02.000Z",
      "changeTime": "2019-02-13T00:46:44.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/pages",
      "base": "404.js",
      "ext": ".js",
      "name": "404",
      "relativeDirectory": "pages",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198651,
      "blocks": 8,
      "atimeMs": 1550022242000,
      "mtimeMs": 1550018804000,
      "ctimeMs": 1550018804000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T01:44:02.000Z",
      "mtime": "2019-02-13T00:46:44.000Z",
      "ctime": "2019-02-13T00:46:44.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "8e1eb3a4fdea08c7f1d9c3ef0cbb81c9",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/system-dynamics-in-design-systems.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md",
      "relativePath": "posts/system-dynamics-in-design-systems.md",
      "extension": "md",
      "size": 28109,
      "prettySize": "28.1 kB",
      "modifiedTime": "2019-02-13T02:00:48.000Z",
      "accessTime": "2019-02-13T02:00:48.000Z",
      "changeTime": "2019-02-13T02:00:48.000Z",
      "birthTime": "2019-02-13T01:03:15.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "system-dynamics-in-design-systems.md",
      "ext": ".md",
      "name": "system-dynamics-in-design-systems",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57357934,
      "blocks": 56,
      "atimeMs": 1550023248000,
      "mtimeMs": 1550023248000,
      "ctimeMs": 1550023248000,
      "birthtimeMs": 1550019795000,
      "atime": "2019-02-13T02:00:48.000Z",
      "mtime": "2019-02-13T02:00:48.000Z",
      "ctime": "2019-02-13T02:00:48.000Z",
      "birthtime": "2019-02-13T01:03:15.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7971f98c3b7ac608a7d245264d761eb0",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/on-the-experience-of-becoming.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md",
      "relativePath": "posts/on-the-experience-of-becoming.md",
      "extension": "md",
      "size": 2568,
      "prettySize": "2.57 kB",
      "modifiedTime": "2019-02-13T00:46:44.000Z",
      "accessTime": "2019-02-13T01:43:53.000Z",
      "changeTime": "2019-02-13T00:46:44.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "on-the-experience-of-becoming.md",
      "ext": ".md",
      "name": "on-the-experience-of-becoming",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198656,
      "blocks": 8,
      "atimeMs": 1550022233000,
      "mtimeMs": 1550018804000,
      "ctimeMs": 1550018804000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T01:43:53.000Z",
      "mtime": "2019-02-13T00:46:44.000Z",
      "ctime": "2019-02-13T00:46:44.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "32ce7be3e50fcff4f3596e40642cd080",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/size-and-mass-in-design-systems.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md",
      "relativePath": "posts/size-and-mass-in-design-systems.md",
      "extension": "md",
      "size": 3775,
      "prettySize": "3.77 kB",
      "modifiedTime": "2019-02-13T00:48:58.000Z",
      "accessTime": "2019-02-13T01:43:53.000Z",
      "changeTime": "2019-02-13T00:48:58.000Z",
      "birthTime": "2019-02-13T00:48:58.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "size-and-mass-in-design-systems.md",
      "ext": ".md",
      "name": "size-and-mass-in-design-systems",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57231799,
      "blocks": 8,
      "atimeMs": 1550022233000,
      "mtimeMs": 1550018938000,
      "ctimeMs": 1550018938000,
      "birthtimeMs": 1550018938000,
      "atime": "2019-02-13T01:43:53.000Z",
      "mtime": "2019-02-13T00:48:58.000Z",
      "ctime": "2019-02-13T00:48:58.000Z",
      "birthtime": "2019-02-13T00:48:58.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "d28149d02b6da4b9093b1da38bc2dd9f",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/programmatic-color-palettes.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md",
      "relativePath": "posts/programmatic-color-palettes.md",
      "extension": "md",
      "size": 5093,
      "prettySize": "5.09 kB",
      "modifiedTime": "2019-02-13T00:48:58.000Z",
      "accessTime": "2019-02-13T01:43:53.000Z",
      "changeTime": "2019-02-13T00:48:58.000Z",
      "birthTime": "2019-02-13T00:48:58.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "programmatic-color-palettes.md",
      "ext": ".md",
      "name": "programmatic-color-palettes",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57231800,
      "blocks": 16,
      "atimeMs": 1550022233000,
      "mtimeMs": 1550018938000,
      "ctimeMs": 1550018938000,
      "birthtimeMs": 1550018938000,
      "atime": "2019-02-13T01:43:53.000Z",
      "mtime": "2019-02-13T00:48:58.000Z",
      "ctime": "2019-02-13T00:48:58.000Z",
      "birthtime": "2019-02-13T00:48:58.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "bb62c9071bf0ce3c2219cf05d8ceb3c8",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/the-analysis-and-ontology-of-design-systems.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md",
      "relativePath": "posts/the-analysis-and-ontology-of-design-systems.md",
      "extension": "md",
      "size": 9995,
      "prettySize": "9.99 kB",
      "modifiedTime": "2019-02-13T00:46:44.000Z",
      "accessTime": "2019-02-13T01:43:53.000Z",
      "changeTime": "2019-02-13T00:46:44.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "the-analysis-and-ontology-of-design-systems.md",
      "ext": ".md",
      "name": "the-analysis-and-ontology-of-design-systems",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198659,
      "blocks": 24,
      "atimeMs": 1550022233000,
      "mtimeMs": 1550018804000,
      "ctimeMs": 1550018804000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T01:43:53.000Z",
      "mtime": "2019-02-13T00:46:44.000Z",
      "ctime": "2019-02-13T00:46:44.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "026f58ba34657ab642357b56fad8eb94",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/templates/post.js\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "relativePath": "templates/post.js",
      "extension": "js",
      "size": 1033,
      "prettySize": "1.03 kB",
      "modifiedTime": "2019-02-13T00:46:44.000Z",
      "accessTime": "2019-02-13T01:47:02.000Z",
      "changeTime": "2019-02-13T00:46:44.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/templates",
      "base": "post.js",
      "ext": ".js",
      "name": "post",
      "relativeDirectory": "templates",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198664,
      "blocks": 8,
      "atimeMs": 1550022422000,
      "mtimeMs": 1550018804000,
      "ctimeMs": 1550018804000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T01:47:02.000Z",
      "mtime": "2019-02-13T00:46:44.000Z",
      "ctime": "2019-02-13T00:46:44.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "075929a359835334914275fe72777541",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/the-map-is-not-the-territory.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md",
      "relativePath": "posts/the-map-is-not-the-territory.md",
      "extension": "md",
      "size": 4536,
      "prettySize": "4.54 kB",
      "modifiedTime": "2019-02-13T00:48:58.000Z",
      "accessTime": "2019-02-13T01:43:53.000Z",
      "changeTime": "2019-02-13T00:48:58.000Z",
      "birthTime": "2019-02-13T00:48:58.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "the-map-is-not-the-territory.md",
      "ext": ".md",
      "name": "the-map-is-not-the-territory",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57231798,
      "blocks": 16,
      "atimeMs": 1550022233000,
      "mtimeMs": 1550018938000,
      "ctimeMs": 1550018938000,
      "birthtimeMs": 1550018938000,
      "atime": "2019-02-13T01:43:53.000Z",
      "mtime": "2019-02-13T00:48:58.000Z",
      "ctime": "2019-02-13T00:48:58.000Z",
      "birthtime": "2019-02-13T00:48:58.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e7a5222c986a0a98fdc57a5d3e73ba0d",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md",
      "relativePath": "posts/which-shade-of-gray-should-i-use-for-disabled-states.md",
      "extension": "md",
      "size": 3839,
      "prettySize": "3.84 kB",
      "modifiedTime": "2019-02-13T00:48:58.000Z",
      "accessTime": "2019-02-13T01:43:53.000Z",
      "changeTime": "2019-02-13T00:48:58.000Z",
      "birthTime": "2019-02-13T00:48:58.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "which-shade-of-gray-should-i-use-for-disabled-states.md",
      "ext": ".md",
      "name": "which-shade-of-gray-should-i-use-for-disabled-states",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57231797,
      "blocks": 8,
      "atimeMs": 1550022233000,
      "mtimeMs": 1550018938000,
      "ctimeMs": 1550018938000,
      "birthtimeMs": 1550018938000,
      "atime": "2019-02-13T01:43:53.000Z",
      "mtime": "2019-02-13T00:48:58.000Z",
      "ctime": "2019-02-13T00:48:58.000Z",
      "birthtime": "2019-02-13T00:48:58.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md absPath of file",
      "children": [
        "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "d42da3172947069c0be9b260a405f6ad",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/posts/why-use-system-fonts.md\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md",
      "relativePath": "posts/why-use-system-fonts.md",
      "extension": "md",
      "size": 3223,
      "prettySize": "3.22 kB",
      "modifiedTime": "2019-02-13T00:48:58.000Z",
      "accessTime": "2019-02-13T01:43:53.000Z",
      "changeTime": "2019-02-13T00:48:58.000Z",
      "birthTime": "2019-02-13T00:48:58.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/posts",
      "base": "why-use-system-fonts.md",
      "ext": ".md",
      "name": "why-use-system-fonts",
      "relativeDirectory": "posts",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57231796,
      "blocks": 8,
      "atimeMs": 1550022233000,
      "mtimeMs": 1550018938000,
      "ctimeMs": 1550018938000,
      "birthtimeMs": 1550018938000,
      "atime": "2019-02-13T01:43:53.000Z",
      "mtime": "2019-02-13T00:48:58.000Z",
      "ctime": "2019-02-13T00:48:58.000Z",
      "birthtime": "2019-02-13T00:48:58.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/themes/prism.css absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/themes/prism.css absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "68246672adeff4800e7b5bfe2d914e32",
        "mediaType": "text/css",
        "type": "File",
        "description": "File \"src/themes/prism.css\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/themes/prism.css",
      "relativePath": "themes/prism.css",
      "extension": "css",
      "size": 2654,
      "prettySize": "2.65 kB",
      "modifiedTime": "2019-02-13T00:49:59.000Z",
      "accessTime": "2019-02-13T01:44:06.000Z",
      "changeTime": "2019-02-13T00:49:59.000Z",
      "birthTime": "2019-02-13T00:49:59.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src/themes",
      "base": "prism.css",
      "ext": ".css",
      "name": "prism",
      "relativeDirectory": "themes",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57232181,
      "blocks": 8,
      "atimeMs": 1550022246000,
      "mtimeMs": 1550018999000,
      "ctimeMs": 1550018999000,
      "birthtimeMs": 1550018999000,
      "atime": "2019-02-13T01:44:06.000Z",
      "mtime": "2019-02-13T00:49:59.000Z",
      "ctime": "2019-02-13T00:49:59.000Z",
      "birthtime": "2019-02-13T00:49:59.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/favicon.png absPath of file": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/favicon.png absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7df8736c98eb2f2c55280ca4cea18961",
        "mediaType": "image/png",
        "type": "File",
        "description": "File \"src/favicon.png\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "src",
      "absolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/favicon.png",
      "relativePath": "favicon.png",
      "extension": "png",
      "size": 80348,
      "prettySize": "80.3 kB",
      "modifiedTime": "2019-02-13T00:46:44.000Z",
      "accessTime": "2019-02-13T01:43:55.000Z",
      "changeTime": "2019-02-13T00:46:44.000Z",
      "birthTime": "2019-02-13T00:46:44.000Z",
      "root": "/",
      "dir": "/Users/seanblanton/Documents/Sites/blanton/src",
      "base": "favicon.png",
      "ext": ".png",
      "name": "favicon",
      "relativeDirectory": "",
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 57198647,
      "blocks": 160,
      "atimeMs": 1550022235000,
      "mtimeMs": 1550018804000,
      "ctimeMs": 1550018804000,
      "birthtimeMs": 1550018804000,
      "atime": "2019-02-13T01:43:55.000Z",
      "mtime": "2019-02-13T00:46:44.000Z",
      "ctime": "2019-02-13T00:46:44.000Z",
      "birthtime": "2019-02-13T00:46:44.000Z"
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md absPath of file",
      "internal": {
        "content": "---\ntitle: Making Susy Grids Atomic\ndate: 2016-05-08\n---\n\nToday I'm releasing my very first open source project. Albeit tiny, I wanted to share it with the world. I hacked on this over a weekend while trying to refactor my site to make the css a little leaner.\n\nFor a while now I've been using [Susy Grids](http://susy.oddbird.net) to prototype both personal and professional work. Susy grids are great for designing responsive layouts quickly in the browser. I often find that I have a hard time conceptulizing how content will react to breakpoints. I can make static mockups at several sizes, but my intuition is often wrong. Susy grids help fix the problem by allowing me to experiment early.\n\nBut Susy and I weren't getting along with how I wanted to write CSS when it came to dealing with media queries and breakpoints. I was stuck constructing grid component media queries with OOCSS, which wasn't jiving with my interests in utility classes (inspired by [BassCSS](http://www.basscss.com) and [Tachyons](http://www.tachyons.io) )\n\nI wrote Susy Bricks as a module to extend Susy's mixins into atomic classes at multiple breakpoints using the prefixes `.xs`, `.sm`, `.md`, and `.lg` to quickly adjust layouts without even having to touch css. Here's an example below.\n\n\n```html\n<div class=\"box xs-span12 md-span6 lg-span3\">\n```\n\n\nTo give credit where credit is due, I did look to Buzzfeed's [Solid](https://solid.buzzfeed.com) to help me get the prefixing mixin off the ground.\n\nI've been tryin to find better ways to organize my CSS, and this is a step in the right direction. I hope to continue to work on this in the future. Right now, this module only works with the most vanilla version of Susy (which is all I've really used Susy for), but I'd love for it to be more robust in the future.\n\n\nCheck it out over on [Github](https://github.com/seanblanton/susybricks) if you'd like to play around with it\n",
        "type": "MarkdownRemark",
        "contentDigest": "1d7eca87d3287c13ffb79f6bb49e152e",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Making Susy Grids Atomic",
        "date": "2016-05-08T00:00:00.000Z",
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nToday I'm releasing my very first open source project. Albeit tiny, I wanted to share it with the world. I hacked on this over a weekend while trying to refactor my site to make the css a little leaner.\n\nFor a while now I've been using [Susy Grids](http://susy.oddbird.net) to prototype both personal and professional work. Susy grids are great for designing responsive layouts quickly in the browser. I often find that I have a hard time conceptulizing how content will react to breakpoints. I can make static mockups at several sizes, but my intuition is often wrong. Susy grids help fix the problem by allowing me to experiment early.\n\nBut Susy and I weren't getting along with how I wanted to write CSS when it came to dealing with media queries and breakpoints. I was stuck constructing grid component media queries with OOCSS, which wasn't jiving with my interests in utility classes (inspired by [BassCSS](http://www.basscss.com) and [Tachyons](http://www.tachyons.io) )\n\nI wrote Susy Bricks as a module to extend Susy's mixins into atomic classes at multiple breakpoints using the prefixes `.xs`, `.sm`, `.md`, and `.lg` to quickly adjust layouts without even having to touch css. Here's an example below.\n\n\n```html\n<div class=\"box xs-span12 md-span6 lg-span3\">\n```\n\n\nTo give credit where credit is due, I did look to Buzzfeed's [Solid](https://solid.buzzfeed.com) to help me get the prefixing mixin off the ground.\n\nI've been tryin to find better ways to organize my CSS, and this is a step in the right direction. I hope to continue to work on this in the future. Right now, this module only works with the most vanilla version of Susy (which is all I've really used Susy for), but I'd love for it to be more robust in the future.\n\n\nCheck it out over on [Github](https://github.com/seanblanton/susybricks) if you'd like to play around with it\n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md",
      "fields": {
        "slug": "/making-susy-grids-atomic/"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md absPath of file",
      "internal": {
        "content": "---\ntitle: Fiction Writing For Designers\ndate: 2016-06-14\n---\n\nReading fiction, and even more so, writing fiction, has been one of the greatest things I’ve done to better understand how to design for others. In the design community we talk a lot about the importance of writing. In general, it's a great thing. There's a wealth of great resources on the recommended reading for designers, and there's plenty of designers putting out great content on a regular basis, too, but much of it tends to be on usability, psychology, user research, testing, should designers code, design leadership, and other kinds of technical writing. But it's not enough.\n\nThe act of reading and writing fiction requires the author to imagine a reality that is not and never will be her own. It means imagining and coming to an understanding that the people in these stories have lives and experiences equally as complex as hers, and that whoever conceived of these stories has (or had) a life and motivations that are wholly different from her own life and experiences. And when we write fiction, we're asked to create realities that are not prototypical, but specific, and then to understand the implications of those realities for the people that inhabit that imagined space. How do two people with differing value sets perceive the world differently, and how do they interact together?\n\nAll fiction is a design problem, that is to say that fiction seeks to organize the world for a specific purpose. And while the world in which novelists organize and create meaning and just happens to be imagined, that imagined world is valid, and real, and informed and strengthened by the reality that surrounds it.\n\nThe act of fiction goes far beyond something like writing personas. While personas tend to be constructed to be a single, concrete figure, that persona is intended to stand as proxy for an entire user group. This is the difference between _persona_ and _character_. Persona is often too reductive to ever be more than a ghost of a person inside of a work of fiction. It's through a combination of persona, user journey, and storyboarding that we as designers only begin to scratch the surface of what it means to be the personas we imagine, validate, and ultimately design for. What the very best fiction does so well is examines character through the lenses of change and time. It finds nuanced differences in character's moods, behaviors, belief systems, needs, goals, etc between what was and what is. And the very best writers consider you, the reader, too. Your thoughts and your emotion and the experience of you as person sitting and reading the scene and comparing it in your mind to your entire worldview.\n\nThe more we read stories and the more we try to write our own, the better a language we have to understand the people whom we design for, and the better context we have to understand ourselves.\n\nSome of the most important things I may need to convey in a design can only be really talked about anecdotally, through some metaphor, image, or story. It’s through story that my thoughts are condensed and transfigured. These stories become easier to understand or draw correlations between because we’re all so used to them. Every single one of us tells stories. Anthropologists have identified that storytelling exists in every country and every culture in the world, and stories have existed in some form or another, oral, written, or visual, for thousands of years. Our entire civilization has been built on our ability to communicate with and understand one another effectively.\n\nWhen I tell you a story, it's because I need to tell you something about the way I think or the way that I feel. I tell stories when something is funny, or interesting, or profound, or beautiful, or inspiring. When we tell stories we assume our telling will communicate something to the recipient about who we are and what we think and value.\n\n> \"Is this what I think? And is this all I have to say? And am I making myself understood?\"\n\nAnd herein lays the key problem: the words I write can only sketch the outline of what it is I mean to say. But then I present these words as a tangible artifact of who I am and what I think.\n\nAs a designer, my understanding of the person whom I design for can only ever be a sketch of who I think they might be, not who they are. It helps to practice healthy skepticism:\n\n> “Health Approach presupposes that truth is objective at least in the minimal sense that believing something does not make it so, that something‘s being true does not mean we believe it, and that we are capable of making mistakes.”\n>\n> – (pg. 90) LE MORVAN, Pierre. \"Healthy Skepticism and Practical Wisdom\"\n\nIt behooves me to be as skilled as I can be at creating such a weak representation of real life, and to be always conscious of the fact that no matter how true I believe the facts to be, it’s always possible that I may be wrong every time. And that — that is incredibly humbling.\n",
        "type": "MarkdownRemark",
        "contentDigest": "397b316583bbcdb1aa729e1e1ccef0a1",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Fiction Writing For Designers",
        "date": "2016-06-14T00:00:00.000Z",
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nReading fiction, and even more so, writing fiction, has been one of the greatest things I’ve done to better understand how to design for others. In the design community we talk a lot about the importance of writing. In general, it's a great thing. There's a wealth of great resources on the recommended reading for designers, and there's plenty of designers putting out great content on a regular basis, too, but much of it tends to be on usability, psychology, user research, testing, should designers code, design leadership, and other kinds of technical writing. But it's not enough.\n\nThe act of reading and writing fiction requires the author to imagine a reality that is not and never will be her own. It means imagining and coming to an understanding that the people in these stories have lives and experiences equally as complex as hers, and that whoever conceived of these stories has (or had) a life and motivations that are wholly different from her own life and experiences. And when we write fiction, we're asked to create realities that are not prototypical, but specific, and then to understand the implications of those realities for the people that inhabit that imagined space. How do two people with differing value sets perceive the world differently, and how do they interact together?\n\nAll fiction is a design problem, that is to say that fiction seeks to organize the world for a specific purpose. And while the world in which novelists organize and create meaning and just happens to be imagined, that imagined world is valid, and real, and informed and strengthened by the reality that surrounds it.\n\nThe act of fiction goes far beyond something like writing personas. While personas tend to be constructed to be a single, concrete figure, that persona is intended to stand as proxy for an entire user group. This is the difference between _persona_ and _character_. Persona is often too reductive to ever be more than a ghost of a person inside of a work of fiction. It's through a combination of persona, user journey, and storyboarding that we as designers only begin to scratch the surface of what it means to be the personas we imagine, validate, and ultimately design for. What the very best fiction does so well is examines character through the lenses of change and time. It finds nuanced differences in character's moods, behaviors, belief systems, needs, goals, etc between what was and what is. And the very best writers consider you, the reader, too. Your thoughts and your emotion and the experience of you as person sitting and reading the scene and comparing it in your mind to your entire worldview.\n\nThe more we read stories and the more we try to write our own, the better a language we have to understand the people whom we design for, and the better context we have to understand ourselves.\n\nSome of the most important things I may need to convey in a design can only be really talked about anecdotally, through some metaphor, image, or story. It’s through story that my thoughts are condensed and transfigured. These stories become easier to understand or draw correlations between because we’re all so used to them. Every single one of us tells stories. Anthropologists have identified that storytelling exists in every country and every culture in the world, and stories have existed in some form or another, oral, written, or visual, for thousands of years. Our entire civilization has been built on our ability to communicate with and understand one another effectively.\n\nWhen I tell you a story, it's because I need to tell you something about the way I think or the way that I feel. I tell stories when something is funny, or interesting, or profound, or beautiful, or inspiring. When we tell stories we assume our telling will communicate something to the recipient about who we are and what we think and value.\n\n> \"Is this what I think? And is this all I have to say? And am I making myself understood?\"\n\nAnd herein lays the key problem: the words I write can only sketch the outline of what it is I mean to say. But then I present these words as a tangible artifact of who I am and what I think.\n\nAs a designer, my understanding of the person whom I design for can only ever be a sketch of who I think they might be, not who they are. It helps to practice healthy skepticism:\n\n> “Health Approach presupposes that truth is objective at least in the minimal sense that believing something does not make it so, that something‘s being true does not mean we believe it, and that we are capable of making mistakes.”\n>\n> – (pg. 90) LE MORVAN, Pierre. \"Healthy Skepticism and Practical Wisdom\"\n\nIt behooves me to be as skilled as I can be at creating such a weak representation of real life, and to be always conscious of the fact that no matter how true I believe the facts to be, it’s always possible that I may be wrong every time. And that — that is incredibly humbling.\n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md",
      "fields": {
        "slug": "/fiction-writing-for-designers/"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"On The Experience of Becoming: Kurt Vonnegut's Famous Letter to Five High School Students\"\ndate: 2018-08-07\n---\n\nIn 2006, some students at Xavier High School in New York were given a writing assignment: write their favorite author in an attempt to get him or her to visit the school. Five of those students chose to write Kurt Vonnegut.\n\nVonnegut did not end up visitng the school, but he did write a letter in response. That now famous response was brief and wonderful and its premise both simple and profound: practice any art in order to better yourself.\n\nI opine that Vonnegut's words extend beyond the scope of his letter, past \"any art\" as he suggests to the students, but instead into _any act_. Practice science, or philosophy, or running, or law. Practice being alone, being with others, loving yourself, loving someone else. As Vonnegut describes it — become. _Become_.\n\nThe letter, in its entirety, is here.\n\n> November 5, 2006\n>\n> Dear Xavier High School, and Ms. Lockwood, and Messrs Perin, McFeely, Batten, Maurer and Congiusta:\n>\n> I thank you for your friendly letters. You sure know how to cheer up a really old geezer (84) in his sunset years. I don't make public appearances any more because I now resemble nothing so much as an iguana.\n>\n> What I had to say to you, moreover, would not take long, to wit: Practice any art, music, singing, dancing, acting, drawing, painting, sculpting, poetry, fiction, essays, reportage, no matter how well or badly, not to get money and fame, but to experience becoming, to find out what's inside you, to make your soul grow.\n>\n> Seriously! I mean starting right now, do art and do it for the rest of your lives. Draw a funny or nice picture of Ms. Lockwood, and give it to her. Dance home after school, and sing in the shower and on and on. Make a face in your mashed potatoes. Pretend you're Count Dracula.\n>\n> Here's an assignment for tonight, and I hope Ms. Lockwood will flunk you if you don't do it: Write a six line poem, about anything, but rhymed. No fair tennis without a net. Make it as good as you possibly can. But don't tell anybody what you're doing. Don't show it or recite it to anybody, not even your girlfriend or parents or whatever, or Ms. Lockwood. OK?\n>\n> Tear it up into teeny-weeny pieces, and discard them into widely separated trash recepticals. You will find that you have already been gloriously rewarded for your poem. You have experienced becoming, learned a lot more about what's inside you, and you have made your soul grow.\n>\n> God bless you all!\n>\n> Kurt Vonnegut\n",
        "type": "MarkdownRemark",
        "contentDigest": "fc6dff28936e7c7128b062a6f6d6d1d2",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "On The Experience of Becoming: Kurt Vonnegut's Famous Letter to Five High School Students",
        "date": "2018-08-07T00:00:00.000Z",
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nIn 2006, some students at Xavier High School in New York were given a writing assignment: write their favorite author in an attempt to get him or her to visit the school. Five of those students chose to write Kurt Vonnegut.\n\nVonnegut did not end up visitng the school, but he did write a letter in response. That now famous response was brief and wonderful and its premise both simple and profound: practice any art in order to better yourself.\n\nI opine that Vonnegut's words extend beyond the scope of his letter, past \"any art\" as he suggests to the students, but instead into _any act_. Practice science, or philosophy, or running, or law. Practice being alone, being with others, loving yourself, loving someone else. As Vonnegut describes it — become. _Become_.\n\nThe letter, in its entirety, is here.\n\n> November 5, 2006\n>\n> Dear Xavier High School, and Ms. Lockwood, and Messrs Perin, McFeely, Batten, Maurer and Congiusta:\n>\n> I thank you for your friendly letters. You sure know how to cheer up a really old geezer (84) in his sunset years. I don't make public appearances any more because I now resemble nothing so much as an iguana.\n>\n> What I had to say to you, moreover, would not take long, to wit: Practice any art, music, singing, dancing, acting, drawing, painting, sculpting, poetry, fiction, essays, reportage, no matter how well or badly, not to get money and fame, but to experience becoming, to find out what's inside you, to make your soul grow.\n>\n> Seriously! I mean starting right now, do art and do it for the rest of your lives. Draw a funny or nice picture of Ms. Lockwood, and give it to her. Dance home after school, and sing in the shower and on and on. Make a face in your mashed potatoes. Pretend you're Count Dracula.\n>\n> Here's an assignment for tonight, and I hope Ms. Lockwood will flunk you if you don't do it: Write a six line poem, about anything, but rhymed. No fair tennis without a net. Make it as good as you possibly can. But don't tell anybody what you're doing. Don't show it or recite it to anybody, not even your girlfriend or parents or whatever, or Ms. Lockwood. OK?\n>\n> Tear it up into teeny-weeny pieces, and discard them into widely separated trash recepticals. You will find that you have already been gloriously rewarded for your poem. You have experienced becoming, learned a lot more about what's inside you, and you have made your soul grow.\n>\n> God bless you all!\n>\n> Kurt Vonnegut\n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md",
      "fields": {
        "slug": "/on-the-experience-of-becoming/"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md absPath of file",
      "internal": {
        "content": "---\ntitle: Size and Mass in Design Systems\ndate: 2017-09-17\n---\nSometimes it can be hard to know what to work on in a design system. There are so many things which command our attention. There's always a very delicate balancing act between wanting to use the design system as a way to advance systems-level thinking inside the organization while at the same time utilizing the system as a way to embrace what there already is, and set up a set of guidelines to help others understand the decisions that have been made thus far.\n\nThis gets trickier in very large design systems or in cases where the design system has been neglected or absent up until this point. Both the amount of time saved by advancing foundational parts of the design system and the debt accrued by failing to document new things as they come into existence can be a zero sum game.\n\nOne way I've taken to dealing with this is to think about any aspect of building a design system in terms of **variance, mass, and size.**\n\nVariance tends to be the enemy of design systems. Variance might be defined as the point at which a portion of the design system takes on new form to meet a new goal. Variance may also be at a low or high _intensity_. A high intensity variance would be one in which two states of an object in the design system exist to meet the **a wildly different** goal. A variance of normal intensity would be one in which two objects or states exist for **similar, more closely related, but not congruent** purposes. A low intensity variance would be one that simply needs to specify state or interaction related to **the same goals**.\n\nWhen cataloging a design system, the intensity of variance tends to come into play not so much in the objects themselves as in the combinatorial sets of these objects. Objects which are comprised of many other objects, or objects with a high intensity of variance, can be said to be of great **size**. The parts of the design system with the smallest size consider the _least relationships and goals possible_.\n\nAn object in a design system has **mass** if producing a chance in that object _affects other objects_ in the system. An object can be incredibly complex (i.e. it can be said to be of great size) but be fairly isolated in its application. It would be isolated to a specific surface or seldom used situation, and thus, would have a small mass. Conversely, an object could exist at a relatively low state of complexity but have a cascading effect that has implications on many, _many other parts of the design system_, thus giving it **large mass**\n\nDesign systems can do a lot to keep the overall complexity of the system down by considering the parts before the whole. By prioritizing the parts of the design system which have the smallest size, but the greatest mass, it's easier to start building a design system that pays dividends. Likewise, when new objects come into existence, the question about whether or not to let new circumstances impact the momentum of the design system should also be a matter of the mass and size of that change relative to the current state of the overall system.\n\nThis is by no means a perfect way to build a design system. I recognize that the massive complexity of building at scale and parallel to ongoing product development efforts can strongly impact one's ability to always rationalize system adaptation against the notions of mass and size. At the end of the day, design systems are built for people, and we should be doing whatever we can to make their lives better, in both the short term and the long, and not let any guiding notions like these become dogmatic treatises any more than should the idea that these systems are winding and complex and cannot be neatly put into boxes mock the attempt.\n",
        "type": "MarkdownRemark",
        "contentDigest": "7c33fcecf39826fc693045ef08522fe8",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Size and Mass in Design Systems",
        "date": "2017-09-17T00:00:00.000Z",
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "Sometimes it can be hard to know what to work on in a design system. There are so many things which command our attention. There's always a very delicate balancing act between wanting to use the design system as a way to advance systems-level thinking inside the organization while at the same time utilizing the system as a way to embrace what there already is, and set up a set of guidelines to help others understand the decisions that have been made thus far.\n\nThis gets trickier in very large design systems or in cases where the design system has been neglected or absent up until this point. Both the amount of time saved by advancing foundational parts of the design system and the debt accrued by failing to document new things as they come into existence can be a zero sum game.\n\nOne way I've taken to dealing with this is to think about any aspect of building a design system in terms of **variance, mass, and size.**\n\nVariance tends to be the enemy of design systems. Variance might be defined as the point at which a portion of the design system takes on new form to meet a new goal. Variance may also be at a low or high _intensity_. A high intensity variance would be one in which two states of an object in the design system exist to meet the **a wildly different** goal. A variance of normal intensity would be one in which two objects or states exist for **similar, more closely related, but not congruent** purposes. A low intensity variance would be one that simply needs to specify state or interaction related to **the same goals**.\n\nWhen cataloging a design system, the intensity of variance tends to come into play not so much in the objects themselves as in the combinatorial sets of these objects. Objects which are comprised of many other objects, or objects with a high intensity of variance, can be said to be of great **size**. The parts of the design system with the smallest size consider the _least relationships and goals possible_.\n\nAn object in a design system has **mass** if producing a chance in that object _affects other objects_ in the system. An object can be incredibly complex (i.e. it can be said to be of great size) but be fairly isolated in its application. It would be isolated to a specific surface or seldom used situation, and thus, would have a small mass. Conversely, an object could exist at a relatively low state of complexity but have a cascading effect that has implications on many, _many other parts of the design system_, thus giving it **large mass**\n\nDesign systems can do a lot to keep the overall complexity of the system down by considering the parts before the whole. By prioritizing the parts of the design system which have the smallest size, but the greatest mass, it's easier to start building a design system that pays dividends. Likewise, when new objects come into existence, the question about whether or not to let new circumstances impact the momentum of the design system should also be a matter of the mass and size of that change relative to the current state of the overall system.\n\nThis is by no means a perfect way to build a design system. I recognize that the massive complexity of building at scale and parallel to ongoing product development efforts can strongly impact one's ability to always rationalize system adaptation against the notions of mass and size. At the end of the day, design systems are built for people, and we should be doing whatever we can to make their lives better, in both the short term and the long, and not let any guiding notions like these become dogmatic treatises any more than should the idea that these systems are winding and complex and cannot be neatly put into boxes mock the attempt.\n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md",
      "fields": {
        "slug": "/size-and-mass-in-design-systems/"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md absPath of file",
      "internal": {
        "content": "---\ntitle: Programmatic Color Palettes\ndate: 2017-01-17\n---\n\nComing up with a consistant set of colors for us in UI design is no easy task. Many times, when style guides are created, a few key hues are picked out and documented. This doesn't take into account he myriad tints and shades that may be needed when used in practical applications.\n\nOne approach to this is to use something like SCSS' `rgba()` function to build new a new color to build a new color.\n\n```css\n.alert {\n    background-color: rgba($red, 0.1);\n    border-color: $red;\n}\n```\n\nThis gets us pretty far without much effort - but visually, the effects can sometimes be less than desirable. Certain hues behave different under different levels of luminosity. As Henry Munsell in his 1905 book _A Color Notation_ noted, reds, blues, and purples have a much longer chroma axis than some yellows. Likewise, some hues may need to be adjusted as saturation increases to keep them optically consistent.\n\nI found myself wanting the flexibility to pull or push hues around quickly, and I wanted the results to be something that could be quickly translated to code so that the single source of truth could live with the developers, rather than a sketch file designers would have to export and transmit back and forth.\n\nI tried some existing tools created by [Brent Jackson](http://www.jxnblk.com/), namely [Palx](https://palx.jxnblk.com/), which served as a huge inspiration for this project. However, it didn't have the flexibility to adjust hue or saturation. I built Palettes using the same tool as Palx,  [Chroma JS](http://gka.github.io/chroma.js/), but retooling it to have increased flexibility. This little library works wonders.\n\n## Palettes\nHere's a peek at Palettes:\n\n```javascript\nconst stepsToFloat = options =>\n  Array.from({ length: options.luminance }, (n, i) =>\n    (i + 0.5) / 10).reverse()\n  .map(s => modulate(s, [0, 1], [options.start, options.end]));\n```\n\nThis is the first piece. It will return the number of tints of a given base color to me, specified later in `config.js`\n\nI then needed to be able to adjust colors with a few parameters.\n\n```javascript\nconst shiftColor = (color, s, index, shift) =>\n  chroma(s)\n  .set('hsl.h', chroma(color).get('hsl.h') - ((index * (index * 2)) * (shift * 0.01))).hex();\n```\n\n```javascript\nconst shiftSat = (color, s, index, sat) =>\n  chroma(s)\n  .saturate(((sat * 0.1) * Math.log(index + 1)))\n  .hex();\n```\n\nFiguring out the math here was a bit of trial and error. By picking colors manually and plotting them on a curve, I found I was consistanty adjusting saturation on a roughly logarithmic curve. Hue shifts were adjusted on a quadradic curve. This takes a starting color, a step in the scale, an index, and a level of saturation or hue shift. Positive numbers shift hue right on the standard `CIECAM02` model. Negative numbers shift the hue left.\n\nThen I needed to adjust each color based on it's starting point, changing hue and saturation as those parameters existed:\n\n```javascript\nconst buildColor = (key, sat, shift) => {\n  const color = hueSet[key];\n\n  const steps = stepsToFloat(lumSet)\n  .map(s => chroma(color.hue).luminance(s).hex())\n  .map((s, index) => (sat ? shiftSat(color.hue, s, index, sat) : s))\n  .map((s, index) => (shift ? shiftColor(color.hue, s, index, shift) : s));\n\n  // return values as incremented key value pair\n  const values = expandColors(key, steps);\n\n  colors[key] = values;\n};\n```\n\nI can loop over this for each step hue I specify:\n\n```javascript\nconst buildPalette = (set) => {\n  Object.keys(set).forEach((key) => {\n    buildColor(key, set[key].sat, set[key].shift);\n  });\n  return colors;\n};\n```\n\n\n## Configuration\n\nThe `config.js` has two objects defined in it:\n\n```javascript\nconst lumSet = {\n  luminance: 10,\n  start: 0.05,\n  end: 0.95,\n};\n\nconst hueSet = {\n  blue: {\n    hue: '54A2F0',\n    sat: '3',\n    shift: null,\n  },\n  yellow: {\n    hue: 'FFCC00',\n    sat: '3',\n    shift: '12',\n  },\n}\n```\n\n\n`start` and `end` are used to keep values from going to dark or too light. This way, individual values remain distinct.\n\nWhen I run the script through node with `$ npm run build` it will output a `.json` blob that can be read in to a webapp's config file.\n\n```javascript\n{\n    \"blue\": {\n        \"blue0\": \"#ecf5fd\",\n        \"blue1\": \"#d4ecff\",\n        \"blue2\": \"#bce1ff\",\n        \"blue3\": \"#a1d5ff\",\n        \"blue4\": \"#84c9ff\",\n        \"blue5\": \"#62baff\",\n        \"blue6\": \"#2fa8ff\",\n        \"blue7\": \"#0094ed\",\n        \"blue8\": \"#007bc9\",\n        \"blue9\": \"#005b98\"\n    },\n     \"yellow\": {\n        \"yellow0\": \"#fff4ca\",\n        \"yellow1\": \"#ffe788\",\n        \"yellow2\": \"#ffd43a\",\n        \"yellow3\": \"#ffc300\",\n        \"yellow4\": \"#eeaf00\",\n        \"yellow5\": \"#dc9a00\",\n        \"yellow6\": \"#c78300\",\n        \"yellow7\": \"#af6a00\",\n        \"yellow8\": \"#924f00\",\n        \"yellow9\": \"#6b3300\"\n    },\n}\n```\n\nYou can grab the tool for yourself [here](https://github.com/seanblanton/palettes)\n\n\n## Next Steps\n\nThis project is by no means done yet. I'd love to expand more on this, building it into a webapp to visualize colors on the fly.\n",
        "type": "MarkdownRemark",
        "contentDigest": "49d02a9c5d18214697c63dbe55599a06",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Programmatic Color Palettes",
        "date": "2017-01-17T00:00:00.000Z",
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nComing up with a consistant set of colors for us in UI design is no easy task. Many times, when style guides are created, a few key hues are picked out and documented. This doesn't take into account he myriad tints and shades that may be needed when used in practical applications.\n\nOne approach to this is to use something like SCSS' `rgba()` function to build new a new color to build a new color.\n\n```css\n.alert {\n    background-color: rgba($red, 0.1);\n    border-color: $red;\n}\n```\n\nThis gets us pretty far without much effort - but visually, the effects can sometimes be less than desirable. Certain hues behave different under different levels of luminosity. As Henry Munsell in his 1905 book _A Color Notation_ noted, reds, blues, and purples have a much longer chroma axis than some yellows. Likewise, some hues may need to be adjusted as saturation increases to keep them optically consistent.\n\nI found myself wanting the flexibility to pull or push hues around quickly, and I wanted the results to be something that could be quickly translated to code so that the single source of truth could live with the developers, rather than a sketch file designers would have to export and transmit back and forth.\n\nI tried some existing tools created by [Brent Jackson](http://www.jxnblk.com/), namely [Palx](https://palx.jxnblk.com/), which served as a huge inspiration for this project. However, it didn't have the flexibility to adjust hue or saturation. I built Palettes using the same tool as Palx,  [Chroma JS](http://gka.github.io/chroma.js/), but retooling it to have increased flexibility. This little library works wonders.\n\n## Palettes\nHere's a peek at Palettes:\n\n```javascript\nconst stepsToFloat = options =>\n  Array.from({ length: options.luminance }, (n, i) =>\n    (i + 0.5) / 10).reverse()\n  .map(s => modulate(s, [0, 1], [options.start, options.end]));\n```\n\nThis is the first piece. It will return the number of tints of a given base color to me, specified later in `config.js`\n\nI then needed to be able to adjust colors with a few parameters.\n\n```javascript\nconst shiftColor = (color, s, index, shift) =>\n  chroma(s)\n  .set('hsl.h', chroma(color).get('hsl.h') - ((index * (index * 2)) * (shift * 0.01))).hex();\n```\n\n```javascript\nconst shiftSat = (color, s, index, sat) =>\n  chroma(s)\n  .saturate(((sat * 0.1) * Math.log(index + 1)))\n  .hex();\n```\n\nFiguring out the math here was a bit of trial and error. By picking colors manually and plotting them on a curve, I found I was consistanty adjusting saturation on a roughly logarithmic curve. Hue shifts were adjusted on a quadradic curve. This takes a starting color, a step in the scale, an index, and a level of saturation or hue shift. Positive numbers shift hue right on the standard `CIECAM02` model. Negative numbers shift the hue left.\n\nThen I needed to adjust each color based on it's starting point, changing hue and saturation as those parameters existed:\n\n```javascript\nconst buildColor = (key, sat, shift) => {\n  const color = hueSet[key];\n\n  const steps = stepsToFloat(lumSet)\n  .map(s => chroma(color.hue).luminance(s).hex())\n  .map((s, index) => (sat ? shiftSat(color.hue, s, index, sat) : s))\n  .map((s, index) => (shift ? shiftColor(color.hue, s, index, shift) : s));\n\n  // return values as incremented key value pair\n  const values = expandColors(key, steps);\n\n  colors[key] = values;\n};\n```\n\nI can loop over this for each step hue I specify:\n\n```javascript\nconst buildPalette = (set) => {\n  Object.keys(set).forEach((key) => {\n    buildColor(key, set[key].sat, set[key].shift);\n  });\n  return colors;\n};\n```\n\n\n## Configuration\n\nThe `config.js` has two objects defined in it:\n\n```javascript\nconst lumSet = {\n  luminance: 10,\n  start: 0.05,\n  end: 0.95,\n};\n\nconst hueSet = {\n  blue: {\n    hue: '54A2F0',\n    sat: '3',\n    shift: null,\n  },\n  yellow: {\n    hue: 'FFCC00',\n    sat: '3',\n    shift: '12',\n  },\n}\n```\n\n\n`start` and `end` are used to keep values from going to dark or too light. This way, individual values remain distinct.\n\nWhen I run the script through node with `$ npm run build` it will output a `.json` blob that can be read in to a webapp's config file.\n\n```javascript\n{\n    \"blue\": {\n        \"blue0\": \"#ecf5fd\",\n        \"blue1\": \"#d4ecff\",\n        \"blue2\": \"#bce1ff\",\n        \"blue3\": \"#a1d5ff\",\n        \"blue4\": \"#84c9ff\",\n        \"blue5\": \"#62baff\",\n        \"blue6\": \"#2fa8ff\",\n        \"blue7\": \"#0094ed\",\n        \"blue8\": \"#007bc9\",\n        \"blue9\": \"#005b98\"\n    },\n     \"yellow\": {\n        \"yellow0\": \"#fff4ca\",\n        \"yellow1\": \"#ffe788\",\n        \"yellow2\": \"#ffd43a\",\n        \"yellow3\": \"#ffc300\",\n        \"yellow4\": \"#eeaf00\",\n        \"yellow5\": \"#dc9a00\",\n        \"yellow6\": \"#c78300\",\n        \"yellow7\": \"#af6a00\",\n        \"yellow8\": \"#924f00\",\n        \"yellow9\": \"#6b3300\"\n    },\n}\n```\n\nYou can grab the tool for yourself [here](https://github.com/seanblanton/palettes)\n\n\n## Next Steps\n\nThis project is by no means done yet. I'd love to expand more on this, building it into a webapp to visualize colors on the fly.\n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md",
      "fields": {
        "slug": "/programmatic-color-palettes/"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md absPath of file",
      "internal": {
        "content": "---\ntitle: The Analysis and Ontology of Design Systems\ndate: 2018-03-11\nprivate: true\n---\n\nThe following passages will attempt to define design systems and their relationships.\n\nI hesitate to refer to this as a theory, despite it being a common way these types of things get referred to conversationally. While theory has been transmuted over time, I still opine that theories need to be tested, proven, and widely accepted as true. The following builds on the work of others that have come before me but is more like a kind of framework or position. It’s yet to be proven whether or not this framework supports the needs of an evolving and expanding ecosystem of platforms and media. I’ve done my best to allow this work to be applicable in any content or platform without being prescriptive in its application.\n\n## Design systems are not visual\n\nThe noun “design system” itself comes with a whole lot of baggage — and unfortunately most of that baggage involves the perception of a design system as a collection of drawn stuff your design team made. As designers, engineers, and product managers alike all know is that the Design Artifact (DA) is only the tip of the iceberg and tends to be one of the last decisions made in the product development cycle, long after all the other work has been done to determine just exactly what the DA needs to be in the first place.\n\nExample: One need not draw any kind of dropdown selector until the fact has already been established that a user needs to be able to make a selection in the first place and that the selection can be one (or sometimes n) number of possible options, that a selector is the most appropriate way in which to present this information, that the selector is something appropriate for this context, that the users of this product know and understand what a selector is and how to use it, ad almost infinitum.\n\nAnd even after selector is the proposed DA for this design problem, we need a rigorous way in which to describe that entity that doesn’t leave out or misrepresent horribly some situation that we hadn’t accounted for, or some new platform of media that sends the entire Jenga tower crashing and tumbling down in some awful mess and we’re sitting there around a conference room table recoiled in terror wondering if we’d even ever designed anything at all.\n\nThe fact of the matter is that design systems aren’t visual in the first place — it’s just that that’s one of the easiest ways for someone to latch on to what a design system is for. Design systems are an abstract way to talk about the real things we make in the world. In this way, they function more like mathematical entities than physical objects. DS investigates the conceptions of and relationships between entities which comprise designed artifacts.\n\nLet’s go through an example of how design systems are like mathematics. Take the number $$3$$. How does one define the number $$3$$? Most of us would point to an instance of $$3$$ of something: three books on the table; three fingers held up. But this kind of definition doesn’t tell us anything about the relationship between three as a count of books on the table and, say, the relationship between three angles in a triangle, or the square root of 3 much less. We’ll need a definition of $$3$$ that isn’t bound by any thing before we can even begin to discuss what three can do without clutching our heads in frustration. The same is true for entities in a design system. For us to have any kind of rigorous account of what that system is to keep the Jenga tower standing tall, we need to separate from it any kind of specific implementation or application. To wit: What is the ontological status of a design system?\n\n[[ define intro to fundamental forces… how to build up the particle set and put back together ]]\n\n## Fundamental Forces of Design Systems\n\nBefore we get into describing design system structure and interactions, it’s important to be apprised that there’s a whole slew of things that can influence the types of inputs we pass to any design system structure. We can stack these forces together and use them to evaluate our design system for any given situation.\n\nLet’s take typography as an example: say we’d like to determine an appropriate set of type sizes for our design system. Those type sizes can be represented as a finite set of numbers T. To determine what set of sizes might be appropriate, we can consider the following:\n\n* The context in which a user experiences the design system (web or mobile, for instance) may give us insight into our initial value for $$f\\_{0}$$ or the total number of values $$n$$ the system needs to support\n* Internationalization may give information about a preferred minimum font size needed to render content with non-Western characters\n* Brand may give insight into how subtle or extreme the ratio $$r$$ between each value in the set is or the initial size to base the system off of\n* The returned value may be further adjusted given more context like user settings or environment\n\n$$baseValue = f*{0} = f + brand + context$$\n$$minimumSize = m = m + brand + internationalization$$\n$$maximumSize = lim*{m \\to \\infty} = M + brand + context$$\n$$length = n + context$$\n$$ratio = r = 1 \\* brand$$\n\n$$T = \\forall f \\in \\{...,f*{0},...\\} f*{0}r^\\tfrac{f}{M} \\* context$$\n\n> ☝ This notation is probably wildly off… better triple check this before ever posting\n\nThe influence of these fundamental forces can be as small as determining font size and as large as determining which features to enable in a certain locale or on a certain device. A non-exhaustive list of possible fundamental forces includes:\n\n| External Standards   | W3C, WCAG, and other best practice consortiums who promote interoperability on the web                                |\n| -------------------- | --------------------------------------------------------------------------------------------------------------------- |\n| Context              | External factors the system has no control over. e.g. Brightness, time, user activity, user settings, impairment, etc |\n| Research             | The results of user testing, competitor research, A/B testing, etc                                                    |\n| Internationalization | Translations, cultural alternatives, RTL layouts, etc                                                                 |\n| Brand                | Brand values, voice, position, target audience, etc which may anchor design decisions                                 |\n\n## Parts of a Design System\n\nContext (Context Functions)\nContexts are external factors outside the design system that the system has no control over. When context comes into a design system, the system needs to adapt to fit that context. Because of this, every element of a design system is a function of $$N$$ contexts, each represented as\n\n$$C(x) = context(particle)$$\n\n#### Force\n\nTo have force is to to an effect on the output of an aspect of the design system. Design systems are affected by fundamental forces (described above)\n\n#### Particles\n\nParticles are sets containing a single entity. They are informed by fundamental forces but are themselves immutable parts of the design system. Particles are typed and are agnostic of any implementation. The known types are: `number`, `string`, `boolean`, and `function`\n\n#### Equivalent Particle Subsets\n\nParticle sets are the subset of all particles which, given particles $$a, b$$, and context $$C$$, are equivalent. Particle sets may be of different types, e.g. a numeral and a string, but still return the same value under the same context. E.g. color transformations.\n\n`C(a) == C(b)`\n\n```javascript\n// context.platform = 'ios'\nC(val) = toIosColor(val);\nC('#FFF') === C(rgb(255, 255, 255)) // TRUE\n```\n\n#### Particle Arrays\n\nParticle arrays are subsets of particles which all have the same type and are interchangeable. They are context agnostic and provide the foundation for variance. Particle arrays may get their values from an Equivalent Particle Subset via some Context function.\n\nExample\n`TypeSizes = [10, 12, 14, 16, 20, 24, 32;]`\n`Color = [r, g, b, a]`\n\n#### Atoms\n\nAn atom a set $$1+N$$ particles whose values are equal to the properties required to define a single property of a given context. These vary across platforms and are transformed by Context functions\n\n```javascript\nwidth\nheight\nbackgroundColor\n```\n\n#### Elements\n\nElements are the set of particles which combine to equal the minimum specification required to produce a standard tag or component in a native context.\n\n```javascript\n<button />\n<div />\n<NSView />\n```\n\n#### Objects\n\nObjects are instances of elements\n\n## Interactions of Subatomic Design Particles\n\nNot all particles are affected by context equally. For instance, particles, particle arrays, or particle sets which have no data properties will not interact with some content strategy contexts. Likewise, data particles will not react with context related to brand colors because the data does not in itself have any visual properties. In these instances, only the composition of these particles can result in a set which is affected by this context.\n\nContext must be evaluated at multiple levels of composition to determine any if any force has been exerted on that entity.\n\n[[ define properties and how they differ from particles ]]\n\n[[ define element functions ]]\n\nFundamental Interactions and Rules of Design Systems Particles\nEverything in the design system is a composition\nAll compositions are sets\nAll sets are immutable\nContext functions return new sets from existing ones\nParticles must be independent\nElements are definitions of objects\nParticles can have no properties beyond a name\n\n[[ tbd ]]\n\n#### Disclosure: I am not a mathematician, philosopher, physicist, biologist, architect, or any other profession whose ideas I have drawn on as metaphor on in order to unpack the problems and possible solutions of design systems.\n",
        "type": "MarkdownRemark",
        "contentDigest": "4c4eac9afc0f33606e90d15190e923e6",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "The Analysis and Ontology of Design Systems",
        "date": "2018-03-11T00:00:00.000Z",
        "private": true,
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nThe following passages will attempt to define design systems and their relationships.\n\nI hesitate to refer to this as a theory, despite it being a common way these types of things get referred to conversationally. While theory has been transmuted over time, I still opine that theories need to be tested, proven, and widely accepted as true. The following builds on the work of others that have come before me but is more like a kind of framework or position. It’s yet to be proven whether or not this framework supports the needs of an evolving and expanding ecosystem of platforms and media. I’ve done my best to allow this work to be applicable in any content or platform without being prescriptive in its application.\n\n## Design systems are not visual\n\nThe noun “design system” itself comes with a whole lot of baggage — and unfortunately most of that baggage involves the perception of a design system as a collection of drawn stuff your design team made. As designers, engineers, and product managers alike all know is that the Design Artifact (DA) is only the tip of the iceberg and tends to be one of the last decisions made in the product development cycle, long after all the other work has been done to determine just exactly what the DA needs to be in the first place.\n\nExample: One need not draw any kind of dropdown selector until the fact has already been established that a user needs to be able to make a selection in the first place and that the selection can be one (or sometimes n) number of possible options, that a selector is the most appropriate way in which to present this information, that the selector is something appropriate for this context, that the users of this product know and understand what a selector is and how to use it, ad almost infinitum.\n\nAnd even after selector is the proposed DA for this design problem, we need a rigorous way in which to describe that entity that doesn’t leave out or misrepresent horribly some situation that we hadn’t accounted for, or some new platform of media that sends the entire Jenga tower crashing and tumbling down in some awful mess and we’re sitting there around a conference room table recoiled in terror wondering if we’d even ever designed anything at all.\n\nThe fact of the matter is that design systems aren’t visual in the first place — it’s just that that’s one of the easiest ways for someone to latch on to what a design system is for. Design systems are an abstract way to talk about the real things we make in the world. In this way, they function more like mathematical entities than physical objects. DS investigates the conceptions of and relationships between entities which comprise designed artifacts.\n\nLet’s go through an example of how design systems are like mathematics. Take the number $$3$$. How does one define the number $$3$$? Most of us would point to an instance of $$3$$ of something: three books on the table; three fingers held up. But this kind of definition doesn’t tell us anything about the relationship between three as a count of books on the table and, say, the relationship between three angles in a triangle, or the square root of 3 much less. We’ll need a definition of $$3$$ that isn’t bound by any thing before we can even begin to discuss what three can do without clutching our heads in frustration. The same is true for entities in a design system. For us to have any kind of rigorous account of what that system is to keep the Jenga tower standing tall, we need to separate from it any kind of specific implementation or application. To wit: What is the ontological status of a design system?\n\n[[ define intro to fundamental forces… how to build up the particle set and put back together ]]\n\n## Fundamental Forces of Design Systems\n\nBefore we get into describing design system structure and interactions, it’s important to be apprised that there’s a whole slew of things that can influence the types of inputs we pass to any design system structure. We can stack these forces together and use them to evaluate our design system for any given situation.\n\nLet’s take typography as an example: say we’d like to determine an appropriate set of type sizes for our design system. Those type sizes can be represented as a finite set of numbers T. To determine what set of sizes might be appropriate, we can consider the following:\n\n* The context in which a user experiences the design system (web or mobile, for instance) may give us insight into our initial value for $$f\\_{0}$$ or the total number of values $$n$$ the system needs to support\n* Internationalization may give information about a preferred minimum font size needed to render content with non-Western characters\n* Brand may give insight into how subtle or extreme the ratio $$r$$ between each value in the set is or the initial size to base the system off of\n* The returned value may be further adjusted given more context like user settings or environment\n\n$$baseValue = f*{0} = f + brand + context$$\n$$minimumSize = m = m + brand + internationalization$$\n$$maximumSize = lim*{m \\to \\infty} = M + brand + context$$\n$$length = n + context$$\n$$ratio = r = 1 \\* brand$$\n\n$$T = \\forall f \\in \\{...,f*{0},...\\} f*{0}r^\\tfrac{f}{M} \\* context$$\n\n> ☝ This notation is probably wildly off… better triple check this before ever posting\n\nThe influence of these fundamental forces can be as small as determining font size and as large as determining which features to enable in a certain locale or on a certain device. A non-exhaustive list of possible fundamental forces includes:\n\n| External Standards   | W3C, WCAG, and other best practice consortiums who promote interoperability on the web                                |\n| -------------------- | --------------------------------------------------------------------------------------------------------------------- |\n| Context              | External factors the system has no control over. e.g. Brightness, time, user activity, user settings, impairment, etc |\n| Research             | The results of user testing, competitor research, A/B testing, etc                                                    |\n| Internationalization | Translations, cultural alternatives, RTL layouts, etc                                                                 |\n| Brand                | Brand values, voice, position, target audience, etc which may anchor design decisions                                 |\n\n## Parts of a Design System\n\nContext (Context Functions)\nContexts are external factors outside the design system that the system has no control over. When context comes into a design system, the system needs to adapt to fit that context. Because of this, every element of a design system is a function of $$N$$ contexts, each represented as\n\n$$C(x) = context(particle)$$\n\n#### Force\n\nTo have force is to to an effect on the output of an aspect of the design system. Design systems are affected by fundamental forces (described above)\n\n#### Particles\n\nParticles are sets containing a single entity. They are informed by fundamental forces but are themselves immutable parts of the design system. Particles are typed and are agnostic of any implementation. The known types are: `number`, `string`, `boolean`, and `function`\n\n#### Equivalent Particle Subsets\n\nParticle sets are the subset of all particles which, given particles $$a, b$$, and context $$C$$, are equivalent. Particle sets may be of different types, e.g. a numeral and a string, but still return the same value under the same context. E.g. color transformations.\n\n`C(a) == C(b)`\n\n```javascript\n// context.platform = 'ios'\nC(val) = toIosColor(val);\nC('#FFF') === C(rgb(255, 255, 255)) // TRUE\n```\n\n#### Particle Arrays\n\nParticle arrays are subsets of particles which all have the same type and are interchangeable. They are context agnostic and provide the foundation for variance. Particle arrays may get their values from an Equivalent Particle Subset via some Context function.\n\nExample\n`TypeSizes = [10, 12, 14, 16, 20, 24, 32;]`\n`Color = [r, g, b, a]`\n\n#### Atoms\n\nAn atom a set $$1+N$$ particles whose values are equal to the properties required to define a single property of a given context. These vary across platforms and are transformed by Context functions\n\n```javascript\nwidth\nheight\nbackgroundColor\n```\n\n#### Elements\n\nElements are the set of particles which combine to equal the minimum specification required to produce a standard tag or component in a native context.\n\n```javascript\n<button />\n<div />\n<NSView />\n```\n\n#### Objects\n\nObjects are instances of elements\n\n## Interactions of Subatomic Design Particles\n\nNot all particles are affected by context equally. For instance, particles, particle arrays, or particle sets which have no data properties will not interact with some content strategy contexts. Likewise, data particles will not react with context related to brand colors because the data does not in itself have any visual properties. In these instances, only the composition of these particles can result in a set which is affected by this context.\n\nContext must be evaluated at multiple levels of composition to determine any if any force has been exerted on that entity.\n\n[[ define properties and how they differ from particles ]]\n\n[[ define element functions ]]\n\nFundamental Interactions and Rules of Design Systems Particles\nEverything in the design system is a composition\nAll compositions are sets\nAll sets are immutable\nContext functions return new sets from existing ones\nParticles must be independent\nElements are definitions of objects\nParticles can have no properties beyond a name\n\n[[ tbd ]]\n\n#### Disclosure: I am not a mathematician, philosopher, physicist, biologist, architect, or any other profession whose ideas I have drawn on as metaphor on in order to unpack the problems and possible solutions of design systems.\n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md",
      "fields": {
        "slug": "/the-analysis-and-ontology-of-design-systems/"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md absPath of file",
      "internal": {
        "content": "---\ntitle: The Map Is Not The Territory\ndate: 2017-09-15\n---\n\nDesign systems have done much in terms of advocating for and advancing collective thought towards the notion of component-based design and development strategy. By documenting patterns and discussing the application and extension of those patterns, the design system has established a kind of **figure-ground** relationship between the things that are and are not a part of that system. What is, is recorded, and what is recorded describes what their is.\n\nBut a design system is not a library of sketch symbols neatly arranged on an infinite canvas, nor is it a folder of components, or set of pre-made templates. It’s not the dos or the don’ts. And while design systems that are generated from code tend to be easier to maintain and describe a more **accurate** representation of what can actually be put into production for other people to use, than those drawn by hand in vector, assuming that a generated design system would be an ultimate source of truth will result in a design system with an equally narrow field of view as its inverse. The component itself, drawn or coded, has very few inherit *principles*, beyond its affordances, which describe what is known about it. For us to truly *know* any object, we need to know about every occurrence of that object. To do this would mean to edge slowly closer towards a system as lumbering as the application to which it represents.\n\n> A map is not the territory it represents, but, if correct, it has a similar structure to the territory, which accounts for its usefulness. **– Alfred Korzybski, Science and Sanity (1933, p. 58)**\n\n\nWe would do well to keep Korzybski in mind when referencing what a design system is and how accurately a design system should seek to represent its application blow-by-blow.\n\nNothing can be devoid of place and time. For a thing to exist, it must exist at a particular point and place in time. Design systems describe not objects, but _possible_ objects, stripped down and generalized, and do not necessarily reference the relation of an object to its environment. These generalized concepts are things that cannot be fully described until the moment in which they exist again. Only though the application of a pattern in a particular situation can we truly say whether or not that pattern is a well-executed application of a system. The application of most parts of a design system are esoteric, and can only be described though metaphor.\n\nDesign system are not rigid rules to be followed. They’re more like sketches, gesture drawings that suggest a shape, a texture, a quality. They are the _map_. They help guide us towards the right reality, but they are not in and of themselves _the_ reality. So it seems that the best way to describe a design system is spend an equal amount of time not just documenting any given object, but documenting the _application_ of that object in time and space and in concert with all the objects it interacts with. But this is still not the territory. If we go through the process of naming and describing and cataloging a portion of the interface with the intent that the end result is a perfect depiction of the territory of that which it represents, we cannot ever reach objective truth. Any description of any interface would be done with a specifically chosen taxonomy to describe and account for that interface, and the very act of choosing _what_ to say is also a choice of what _not_ to say. We can then look at that map and ask ourselves “what does this map represent?” and thus, we only make another map. Again and again, on and on.\n\nDesign systems should aim to tell **stories**, organized through **patterns**, which set up scenarios and suggested outcomes. Throughout the description of these patterns, the design system will reference other patterns. Some of these patterns may be more or less gestural than others. When a design that utilizes that design system is being iterated upon, the system should serve as a guide towards more consistent outcomes. When the design is finalized, if a real pattern or object cannot be well-described through a design system, then either the object or the system should be modified to be rationalized through the order of the system, carefully minding that the design system not grow to such immense precision that it reaches an unusable size. I believe this is how design systems can be malleable to new ideas without becoming a tome of prescriptive specificity that everyone dreads.  \n",
        "type": "MarkdownRemark",
        "contentDigest": "ef7d7e69f842dcc6c00400aef2a41c97",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "The Map Is Not The Territory",
        "date": "2017-09-15T00:00:00.000Z",
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nDesign systems have done much in terms of advocating for and advancing collective thought towards the notion of component-based design and development strategy. By documenting patterns and discussing the application and extension of those patterns, the design system has established a kind of **figure-ground** relationship between the things that are and are not a part of that system. What is, is recorded, and what is recorded describes what their is.\n\nBut a design system is not a library of sketch symbols neatly arranged on an infinite canvas, nor is it a folder of components, or set of pre-made templates. It’s not the dos or the don’ts. And while design systems that are generated from code tend to be easier to maintain and describe a more **accurate** representation of what can actually be put into production for other people to use, than those drawn by hand in vector, assuming that a generated design system would be an ultimate source of truth will result in a design system with an equally narrow field of view as its inverse. The component itself, drawn or coded, has very few inherit *principles*, beyond its affordances, which describe what is known about it. For us to truly *know* any object, we need to know about every occurrence of that object. To do this would mean to edge slowly closer towards a system as lumbering as the application to which it represents.\n\n> A map is not the territory it represents, but, if correct, it has a similar structure to the territory, which accounts for its usefulness. **– Alfred Korzybski, Science and Sanity (1933, p. 58)**\n\n\nWe would do well to keep Korzybski in mind when referencing what a design system is and how accurately a design system should seek to represent its application blow-by-blow.\n\nNothing can be devoid of place and time. For a thing to exist, it must exist at a particular point and place in time. Design systems describe not objects, but _possible_ objects, stripped down and generalized, and do not necessarily reference the relation of an object to its environment. These generalized concepts are things that cannot be fully described until the moment in which they exist again. Only though the application of a pattern in a particular situation can we truly say whether or not that pattern is a well-executed application of a system. The application of most parts of a design system are esoteric, and can only be described though metaphor.\n\nDesign system are not rigid rules to be followed. They’re more like sketches, gesture drawings that suggest a shape, a texture, a quality. They are the _map_. They help guide us towards the right reality, but they are not in and of themselves _the_ reality. So it seems that the best way to describe a design system is spend an equal amount of time not just documenting any given object, but documenting the _application_ of that object in time and space and in concert with all the objects it interacts with. But this is still not the territory. If we go through the process of naming and describing and cataloging a portion of the interface with the intent that the end result is a perfect depiction of the territory of that which it represents, we cannot ever reach objective truth. Any description of any interface would be done with a specifically chosen taxonomy to describe and account for that interface, and the very act of choosing _what_ to say is also a choice of what _not_ to say. We can then look at that map and ask ourselves “what does this map represent?” and thus, we only make another map. Again and again, on and on.\n\nDesign systems should aim to tell **stories**, organized through **patterns**, which set up scenarios and suggested outcomes. Throughout the description of these patterns, the design system will reference other patterns. Some of these patterns may be more or less gestural than others. When a design that utilizes that design system is being iterated upon, the system should serve as a guide towards more consistent outcomes. When the design is finalized, if a real pattern or object cannot be well-described through a design system, then either the object or the system should be modified to be rationalized through the order of the system, carefully minding that the design system not grow to such immense precision that it reaches an unusable size. I believe this is how design systems can be malleable to new ideas without becoming a tome of prescriptive specificity that everyone dreads.  \n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md",
      "fields": {
        "slug": "/the-map-is-not-the-territory/"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md absPath of file",
      "internal": {
        "content": "---\ntitle: Which Shade of Gray Should I Use For Disabled States\ndate: 2016-10-10\n---\n\nThe web is an accessibility nightmare. For many companies, A11Y guidelines are relegated to some \"other\" time or a \"nice to have\". But even when a website meets accessibility standards reasonably well, one of the components in design that seems to be left behind is the disabled state. And it's a somewhat reasonable thing to leave behind. After all, this is a _disabled_ state. It's not intended to be interacted with, so it's reasonable to assume that because of this, accessibility can fall by the wayside.\n\nBut disabled buttons are buttons, too. And disabled text that is still visible on the screen exists to inform a user about the current state of the system. Often, disabled text is there to nudge a user towards another action that could perhaps _enable_ the same text at some point in that context. Or it might exist to inform a user of options that may be unclear to him or her.\n\nA great example of this is in faceted search. I'm on Amazon right now, and it's late in the evening. On the left hand side are my search options. Halfway down the page is a `Refine By` subheader and the very first filter option is for `Delivery Day`. No doubt this is because it is in Amazon's best interest to inform a user that `Get It Today` _is_ a delivery option, and a damn good one, at that. But it's almost 10:00PM at night, and so the only option I have available to me as a user right now is `Get It Tomorrow`. Maybe I should hop online earlier in the day to take advantage of Amazon's great shipping options next time. But if I couldn't see both the disabled gray label and the disabled gray checkbox, the the shipping options aren't nearly as sweet.\n\nSurprisingly, there isn't much talk out there about the `right` shade of gray for disabled. But here's what I do know: **WCAG doesn't set contrast requirements for disabled text**\n\n> **Incidental** – Text or images of text that are part of an inactive user interface component,\n> that are pure decoration, that are not visible to anyone,\n> or that are part of a picture that contains significant other visual content, have no contrast requirement.\n> – [_From WCAG 2.0_](http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html)\n\nDefault, unstyled HTML button labels set to `disabled` are `#7F7F7F`. This is a `4:1` contrast ratio on a white background, just slightly off from minimum. This comes close to meeting the standard for low vision and moderately low visual acuity that tends to come with age. This is around 20/40 vision and tends to represent the acuity of a user around age 80 years old. This would be fine if the text was over 18pt or was 14 point bold.\n\nDefault, unstyled radio buttons set to `disabled` have borders of `#D8D8D8`. This is a 1.43:1 ratio, which is pretty terrible.\n\nDisabled, checked checkboxes have the checkmark at `#A1A1A1`. This is a `2.58:1` ratio. Still bad, but getting better.\n\nPretty dismal as far as options go. Just because WCAG AA doesn't specify a minimum, doesn't mean we can't adopt some sensible best practices for disabled text:\n\n### Best Practices\n\n* Leave disabled form elements at their default styles, even though they don't meet WCAG A.\n* But set the disabled label color to no darker than `#7F7F7F` to ensure that while the button isn't visible, the identifying label is still readable for most. This will serve as a clue for most users.\n* Disable any visual styling on hover or click for disabled buttons or text to prevent confusion\n* Consider some hint text, either in a tooltip or copy next to the disabled action instructing the user on why the action is disabled.\n* Keep the contrast on regular, active items high so that the difference between active items and disabled items is still distinguishable at a glance.\n",
        "type": "MarkdownRemark",
        "contentDigest": "7a6770bb6370d5cf366e4462e8e1a17d",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Which Shade of Gray Should I Use For Disabled States",
        "date": "2016-10-10T00:00:00.000Z",
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nThe web is an accessibility nightmare. For many companies, A11Y guidelines are relegated to some \"other\" time or a \"nice to have\". But even when a website meets accessibility standards reasonably well, one of the components in design that seems to be left behind is the disabled state. And it's a somewhat reasonable thing to leave behind. After all, this is a _disabled_ state. It's not intended to be interacted with, so it's reasonable to assume that because of this, accessibility can fall by the wayside.\n\nBut disabled buttons are buttons, too. And disabled text that is still visible on the screen exists to inform a user about the current state of the system. Often, disabled text is there to nudge a user towards another action that could perhaps _enable_ the same text at some point in that context. Or it might exist to inform a user of options that may be unclear to him or her.\n\nA great example of this is in faceted search. I'm on Amazon right now, and it's late in the evening. On the left hand side are my search options. Halfway down the page is a `Refine By` subheader and the very first filter option is for `Delivery Day`. No doubt this is because it is in Amazon's best interest to inform a user that `Get It Today` _is_ a delivery option, and a damn good one, at that. But it's almost 10:00PM at night, and so the only option I have available to me as a user right now is `Get It Tomorrow`. Maybe I should hop online earlier in the day to take advantage of Amazon's great shipping options next time. But if I couldn't see both the disabled gray label and the disabled gray checkbox, the the shipping options aren't nearly as sweet.\n\nSurprisingly, there isn't much talk out there about the `right` shade of gray for disabled. But here's what I do know: **WCAG doesn't set contrast requirements for disabled text**\n\n> **Incidental** – Text or images of text that are part of an inactive user interface component,\n> that are pure decoration, that are not visible to anyone,\n> or that are part of a picture that contains significant other visual content, have no contrast requirement.\n> – [_From WCAG 2.0_](http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html)\n\nDefault, unstyled HTML button labels set to `disabled` are `#7F7F7F`. This is a `4:1` contrast ratio on a white background, just slightly off from minimum. This comes close to meeting the standard for low vision and moderately low visual acuity that tends to come with age. This is around 20/40 vision and tends to represent the acuity of a user around age 80 years old. This would be fine if the text was over 18pt or was 14 point bold.\n\nDefault, unstyled radio buttons set to `disabled` have borders of `#D8D8D8`. This is a 1.43:1 ratio, which is pretty terrible.\n\nDisabled, checked checkboxes have the checkmark at `#A1A1A1`. This is a `2.58:1` ratio. Still bad, but getting better.\n\nPretty dismal as far as options go. Just because WCAG AA doesn't specify a minimum, doesn't mean we can't adopt some sensible best practices for disabled text:\n\n### Best Practices\n\n* Leave disabled form elements at their default styles, even though they don't meet WCAG A.\n* But set the disabled label color to no darker than `#7F7F7F` to ensure that while the button isn't visible, the identifying label is still readable for most. This will serve as a clue for most users.\n* Disable any visual styling on hover or click for disabled buttons or text to prevent confusion\n* Consider some hint text, either in a tooltip or copy next to the disabled action instructing the user on why the action is disabled.\n* Keep the contrast on regular, active items high so that the difference between active items and disabled items is still distinguishable at a glance.\n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md",
      "fields": {
        "slug": "/which-shade-of-gray-should-i-use-for-disabled-states/"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md absPath of file",
      "internal": {
        "content": "---\ntitle: Why Use System Fonts\ndate: 2016-09-25\n---\n\nWhen choosing fonts for web typography, it's easy for a designer to impulsively reach for Open Sans or Lato or Avenir or whatever the newest, hottest thing out there at the time is. I've done it. We all have. There's a compulsion for the fonts we use on the web to match the fonts we use in marketing material, particuarily print. After all - we do want to be _on brand_, right? But is that the most important thing typography should address?\n\nBut if you start to consider your performance budget, using webfonts starts to make less and less sense. [Users hate slow websites](http://globenewswire.com/news-release/2010/09/07/429014/200875/en/New-Survey-From-Compuware-Gomez-Reveals-Consumers-Will-Quickly-Abandon-Slow-Websites.html)\n\n#### We need to consider what typography is _for_ and what problem it aims to _solve_.\n\nLet's pay attention to the words we don't often even bother to look up in the dictionary. Take user _interfaces_ for example:\n\n> #### in·ter·face\n>\n> ˈin(t)ərˌfās - **noun**  \n> &#8291;1. a point where two systems, subjects, organizations, etc., meet and interact.   \n> &#8291; 2. a device or program enabling a user to communicate with a computer.  \n> &#8291; – [_From Google_](https://www.google.com/search?q=interface+definition&oq=interface+definition)\n\n### When I design something, I aim to make every single design decision solve a problem.\n\nSometimes that problem is for the user, like increasing legibility or reducing cognitive load. Sometimes the problem is for the business, like increasing maintainability and scalability. So maybe that means adding constraints to the design requirements and increasing the efficiency of the system.\n\n## If typography in an interface exists to facilitate interaction, putting a webfont in a button or other parts of UI copy does little to advance this cause.\n\nBut what it does do is this: make your page heavier and harder to maintain. Good web typography should be functional and performant. Everything beyond that is nice to have and should be considered an optimization on an already validated design.\n\n## Using system fonts allows designers to focus more on solving problems and less on aesthetics.\n\nThey also allow your site to feel native to the platform in which a user is experiencing it.\n[W3C is already considering this as a standard anyway](https://lists.w3.org/Archives/Public/www-style/2015Jul/0169.html)\n\nIf you must include webfonts as a part of your UI, at least consider the [alternatives](http://cognition.happycog.com/article/7-alternatives-to-popular-web-typefaces-for-better-performance) that might help reduce your page to help reduce weight and load them [in the most efficient way you can.](https://github.com/bramstein/fontfaceobserver)\n\n## Further Reading\n\n* [Bram Stein on loading fonts](http://bramstein.com/writing/)\n* [Marcin Wichary on Using System UI Fonts in Web Design](https://www.smashingmagazine.com/2015/11/using-system-ui-fonts-practical-guide/)\n* [Sites with System Fonts](https://github.com/mrmrs/awesome-system-fonts)\n* [Katie Kovalcin on Designing wtih a Performance Budget](http://cognition.happycog.com/article/designing-with-a-performance-budget)\n",
        "type": "MarkdownRemark",
        "contentDigest": "2839c7fd1ccb2a67e1a08c4c40e255b5",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Why Use System Fonts",
        "date": "2016-09-25T00:00:00.000Z",
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nWhen choosing fonts for web typography, it's easy for a designer to impulsively reach for Open Sans or Lato or Avenir or whatever the newest, hottest thing out there at the time is. I've done it. We all have. There's a compulsion for the fonts we use on the web to match the fonts we use in marketing material, particuarily print. After all - we do want to be _on brand_, right? But is that the most important thing typography should address?\n\nBut if you start to consider your performance budget, using webfonts starts to make less and less sense. [Users hate slow websites](http://globenewswire.com/news-release/2010/09/07/429014/200875/en/New-Survey-From-Compuware-Gomez-Reveals-Consumers-Will-Quickly-Abandon-Slow-Websites.html)\n\n#### We need to consider what typography is _for_ and what problem it aims to _solve_.\n\nLet's pay attention to the words we don't often even bother to look up in the dictionary. Take user _interfaces_ for example:\n\n> #### in·ter·face\n>\n> ˈin(t)ərˌfās - **noun**  \n> &#8291;1. a point where two systems, subjects, organizations, etc., meet and interact.   \n> &#8291; 2. a device or program enabling a user to communicate with a computer.  \n> &#8291; – [_From Google_](https://www.google.com/search?q=interface+definition&oq=interface+definition)\n\n### When I design something, I aim to make every single design decision solve a problem.\n\nSometimes that problem is for the user, like increasing legibility or reducing cognitive load. Sometimes the problem is for the business, like increasing maintainability and scalability. So maybe that means adding constraints to the design requirements and increasing the efficiency of the system.\n\n## If typography in an interface exists to facilitate interaction, putting a webfont in a button or other parts of UI copy does little to advance this cause.\n\nBut what it does do is this: make your page heavier and harder to maintain. Good web typography should be functional and performant. Everything beyond that is nice to have and should be considered an optimization on an already validated design.\n\n## Using system fonts allows designers to focus more on solving problems and less on aesthetics.\n\nThey also allow your site to feel native to the platform in which a user is experiencing it.\n[W3C is already considering this as a standard anyway](https://lists.w3.org/Archives/Public/www-style/2015Jul/0169.html)\n\nIf you must include webfonts as a part of your UI, at least consider the [alternatives](http://cognition.happycog.com/article/7-alternatives-to-popular-web-typefaces-for-better-performance) that might help reduce your page to help reduce weight and load them [in the most efficient way you can.](https://github.com/bramstein/fontfaceobserver)\n\n## Further Reading\n\n* [Bram Stein on loading fonts](http://bramstein.com/writing/)\n* [Marcin Wichary on Using System UI Fonts in Web Design](https://www.smashingmagazine.com/2015/11/using-system-ui-fonts-practical-guide/)\n* [Sites with System Fonts](https://github.com/mrmrs/awesome-system-fonts)\n* [Katie Kovalcin on Designing wtih a Performance Budget](http://cognition.happycog.com/article/designing-with-a-performance-budget)\n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md",
      "fields": {
        "slug": "/why-use-system-fonts/"
      }
    },
    "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md absPath of file >>> MarkdownRemark": {
      "id": "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"System Dynamics in Design Systems\"\ndate: 2019-02-12\n---\n\n## A Foreword\n\nI would like to start by acknowledging the fact that this post is incomplete and represents only my limited knowledge of systems analysis. The ideas I present here might be skewed and in some cases, rather abstract. This is partly because if I were to put these concepts into more concrete forms they lose a kind of universality that this article seeks to outline.\n\nI also recognize that this way of modeling systems assumes certain organizational structures exist inside a company that can support this methodology. This includes not only the mechanisms to collect data about the system behavior, but a team (or teams) with the time to dedicate toward understanding the behavior of the design, product, and engineering teams using the design system. It also assumes that these organizations are at a level of scale and complexity large enough to warrant even **_worrying_** about this type of thing. I'm not entirely convinced that the costs outweigh the benefits for smaller organizations, specifically because so much of what this article discusses is already sort of tacitly understood by at least some people in the org. But that doesn't mean there isn't something to be gained by rising the ocean of understanding across the board.\n\nThis article's thrust is to outline the broad strokes of systems analysis and how it relates to design systems in a way that is helpful without having to go full boar into complex system modeling or theories that aren't immediately applicable to a design organization. While it's all very fascinating, there just isn't enough space in this article to dedicate to going into the nuance. It's my hope instead that this article inspire teams to have rigorous discussions about how their design system structure is influencing behavior, and identify ways to use design systems better to reach their goals.\n\n## Designing Design Systems\n\n_TLDR: Systems give us a better understanding of the how complex, interconnected, nonlinear parts behave. If we can model it, we can use it to make better decisions in the future._\n\nLet's assume, for the sake of argument, that you already have a design system. Fabulous. As the overall complexity of that design system grows over time, it will become more and more necessary to get a better handle on exactly what the hell people are doing with it. Are your design systems actually effective at solving problems? Are you actually reaching the goals you set out to achieve? And just what are those goals, anyway? Is it to build faster and more consistently — or is that really just more of a rule or requirement you need to fulfill in order to keep the thing standing up in the first place?\n\nAll of these questions are tied up in the operational complexity of whatever organization your design system aims to serve. It could be a team or 5 for an individual surface or a team of 500. It doesn't really matter - at some point it becomes difficult to make improvements to how your design system operates without having a baseline to measure from — to have some indication one way or another if your design system is trending the organization toward its larger goal. We can't predict the future, but we can envision it, and the greater understanding we have of the world in which our design system sits and the behavior of the people who act upon it, the better decisions we can make about how to structure it, communicate it, and scale it so that it provides the most value and the least stress.\n\nOnce we understand how the system is structured and how it behaves, we can shift from asking questions like \"Is it okay for dialogs to be scrollable?\" and instead spending more of our time asking questions like \"What role should design systems play in improving product quality?\". These types of questions have longer lasting, broader impact than any single event or pattern of events could because they're necessarily future-oriented. The amount of **_leverage_** we can enact on the system goes up as we become more future oriented.\n\n![Example of the structure of design systems](understanding-structure-1d80db20-8315-4a50-9584-6e8ef0fe6bbb.svg \"Design systems structure\")\n\nDesign systems are far more than the product they export. They are educational programs and support networks, bug reporting channels, experimental projects, and so on. And there are actors in that system that will do things with that design system that we might not expect. Our ability to recognize and respond to behaviors we don't expect can impact our ability to design design systems that are resilient - systems that can grow and evolve as the company, its goals, and the people who are a part of it grow and evolve.\n\nI'll be exploring these ideas through the lens of system analysis, which is a branch of systems theory. This was all highly inspired by a book called [Thinking in Systems](https://www.amazon.com/Thinking-Systems-Donella-H-Meadows/dp/1603580557 \"Thinking in Systems\") from Donella Meadows. That book is an excellent crash course into systems theory. And many of the examples I'll use to explain some basic concepts of systems are pulled from that work or others like it. Not all my examples are directly related to design — and that's okay. Where possible, I will illustrate concepts by using simple systems with which we are all already familiar.\n\n## What is systems theory and how can it help design systems?\n\nA system is a collection of **interconnected**, organized elements that work together to produce patterns of behavior over time. E.g. A highway is a system of roads and signs and ramps organized for the purpose of maximizing efficient travel. Systems can be embedded inside of systems, so a traffic light is a subsystem within that larger road system. The individual traffic lights go on and off in a specific order and pattern that we can model. The signal's individual behavior acts on the larger roadway and the people that use those roads. The fact that they are a system isn't the interesting part — the interesting part comes into play when we understand how those individual parts of the system work together to do something meaningful. e.g. How does the addition or subtraction of a single traffic light effect congestion? We encounter all kinds of systems on a daily basis, we just don't often think of them as such. Every person you've ever met is a system of hundreds of little tiny systems all working together to help us breathe and eat and go about our days.\n\nSystems theory is the study of how systems are structured and why they do whatever it is they do by understanding their parts, relationships, and behaviors that emerge from them. If we can model a system, we can use that model to gain another perspective that can help us identify root causes to problems and in turn make better decisions. We can expose the model to rigor. We can find the places where it breaks down or find critical relationships that aren't immediately obvious.\n\nOne of the fundamental flaws with systems analysis is that a model of a system is just that - it's only a model, and that model is going to be imperfect. Often, the world in which these models live and breath is a curving set French curves of relationships that swirl and bend back on themselves in complicated ways. They are dynamic and experience perturbations we never expected and can't account for, but the better we understand a system's structure at its basic level, the more equipped we are to understand it at its most complex.\n\n## Parts of a system\n\nNot everything is a system, mind you. That pile of junk in my filing cabinet drawer - not a system, no matter how much I might try to convince you that it's an \"_organized mess_\". There are a collection of elements, sure, but they are neither connected to one another nor are they in a state of change. Nothing acts on them and they don't cause anything else to change, either. Systems have a common set of identifiable elements we can model and a set of behaviors acting on that system. Let's get a little glossary going so we don't have to fuss with what all these things mean as we get going. If you are already familiar with systems theory, you might find some of these explanations fairly reductive, but it'll give us some common ground to work our way up from:\n\n## Stocks\n\nOkay, so stocks are the quantifiable _stuff_ of a system, the _inventory_ or *goods (*though they don't need to be physical. Stock may also be things like physical energy, or patience).A stock is the bedrock of a system. Stocks in a design system might be the number of designers, engineers, and content strategists your design system is consumed by. It's the org budget, the headcount. It's also the number of people maintaining the system, the number of components, the footprint of products it supports, the amount of time available in a given week to maintain it, and so on.\n\n### **We tend to focus more on stocks than flows**\n\nWhen considering design systems, we often over-index on the volume of our stocks, e.g. the number of components in the design system, for instance, and underweight the value in managing the flows that feed those systems. It's easier to make decisions based on adoption than it is to make decisions based on the rate of divergence.\n\nIf we can understand what stocks exist in a design system and what flows influence those stocks, what goals we aim to reach by managing these feedback loops, and what rules govern those goals, we can start to form strategies on how to best manipulate our systems to reach those goals.\n\n## Flows\n\nFlows are actions which cause a stock to increase or decrease over time. Flows can either be inflows, actions which cause a stock to increase, or outflows, which cause a stock to decrease. Once we have a single flow and two stocks, we have the beginning of a relationship in that system. For example: the more births there are, the more the population increases. There is an inflow relationship between births and population. But there's more going on here, too — the greater the population, the more potential there is for more births. So there is another inflow arrow going in the other direction, too. Be apprised that inflows and outflows are often not in sync with each other, and when flows are out of balance, stocks can change. For instance, the rate of bugs incoming could easily exceed the rate at which they're being fixed.\n\n### **Stocks respond to changes in flow slowly**\n\nWhen flows change, stocks tend to be a lagging indicator of that change. Stocks have a momentum, and tend to either grow or shrink. A change in the flows can only go so fast. Even if a radical change in the flows happens, it may take time for the stock to reflect that change in any meaningful way, especially if a stock is being fed from multiple flows at once. Having an awareness of what causes flows to change can serve as an early indicator for stock shifts.\n\n## Feedback Loops\n\nFeedback loops are flow of causal connections that a stock is dependent on. Often feedback loops are flows of information about a stock that leads to a decision that influences the stock. Simply put, it's a cause-and-effect loop. Feedback loops come in several flavors depending on the behavior that they exhibit.\n\nA **reinforcing feedback** **loop** is one that creates more of a stock. It amplifies a signal. The more adoption there is of a design system in an organization, the more people advocate for its merits, and in turn the more adoption it gets. Likewise, the more attrition there is in an org, the lower the morale is, the more people leave, and so on. Reinforcing feedback loops are self-perpetuating. Unchecked, these loops can lead to exponential growth or collapse. This can be either good or bad depending on which behavior the loop is reinforcing.\n\n![Reinforcing loop diagram](reinforcingloop-f82145d2-61f4-4049-8803-c16c27b501b7.svg \"Reinforcing Loop\")\n\nA **balancing feedback loop** is one that neutralizes or balances out whatever flow is imposed on it. Balancing feedback loops are inherently goal seeking - which means that they always have a desired state they want to be in and seek to bring the system into that desirable range. Take a cup of coffee for instance. What the coffee wants, the coffee's goal, is to be the same temperature as the room it sits in.\n\n![Balancing loop diagram](frame-c1ae4280-724c-47b1-8ad1-573ab0d10d04.svg \"Balancing Loop\")\n\nThe greater the discrepancy between a balancing loop's goal and the actual level, the faster it moves toward that goal. So in our coffee example, the hotter the coffee, or the colder the room, the faster the coffee will cool.\n\n### **Feedback loops aren't equal strength**\n\nWhen you're dealing with multiple feedback loops, most of the time one loop is more dominant than the other. Sometimes these relationships can change over time, causing dominance relationships to shift. What's interesting to look at here is what the driving factors are between shifts in flows. Identifying these shift points and the factors that influence them can help you spot when a change in the system might be coming, and can help you prepare for it.\n\n## Delay\n\nDelays are exactly what they sound like: information not getting its message back into the system in a timely enough manner to affect change in the preferred way. There are more than likely delays in every feedback loop you encounter. They could be as short as minutes and as long as months of even years. Let's save a few words and look at a diagram that shows how delays impact feedback:\n\n![Delay diagram](delays-835ab793-bc15-4352-ac8b-3e4b70c7201e.svg \"Delay diagram\")\n\nIn the example above, a symptom of a larger system problem arises, and a short-term stopgap solution is implemented, which alleviates the system problem. However, a delay exists (shown as a double bar through a flow) between when a fix is issued and the downstream unintended consequences of that change that cause the issue or similar ones to come back. Strictly speaking, this diagram could have more delays that would impact timing. There could (and almost certainly would, let's be honest) be a delay between when a system problem was identified and when a solution was decided and implemented. The larger these delays are in a balancing loop, the greater the discrepancy between the inflow and outflow for that stock.\n\n## Resilience\n\nResilience is a measure of a system's ability to respond and adapt to changing conditions over time. When a sudden shock happens, are the systems that we've designed ready to absorb a deviation and still accomplish the same goals?\n\nToo often, the systems we are trying to build and maintain are too optimized for delivery. While this might have ensured we're being as efficient as possible with our time and energy, it also means we might not have managed enough for when shit hits the fan. This is often because the systems we design typically only really account for linear, incremental change. We don't take into account the possibility that radical, revolutionary change will happen. **Optimization and resilience are always in a state of tension**, because the more we optimize highly complex design systems for a particular workflow goaled around delivery within a given set of organizational structure and design patterns, the less resilient those systems become.\n\n## How do systems tend to behave?\n\nNow that we have a basic set of vocabulary we can really get started. The great thing about systems thinking is that similarly modeled systems tend to exhibit similar patterns of behavior, too. Bearing that in mind, let's talk through a few principles that tend to underpin systems.\n\n### **The most important input into a system is the one that's the most limiting**\n\nKnowing which aspect of a design system is the limiting factor is somewhat tricky. Depending on how the design system is maintained, it could be more or less related to staffing or time allocation for the maintainers. Identifying which aspects of your team structure have the greatest impact on your ability to control the health of your design system will help you understand where to put your effort. A dip in these resources can also serve as an early warning sign of systemic problems. A tree without sunlight won't grow, no matter how healthy its roots are. If there's no one around to maintain a design system, it doesn't matter how complete it is: it will slowly wilt.\n\n### **The changing aspects of a system are the ones that have the least effect on the system as a whole**\n\nChanging out the total set of components in a design system does not have much effect on whether or not it _is_ a system. It might not even have much of an affect on how the system is maintained. Likewise, changing the maintainers of that system doesn't really change whether or not there is a design system. The aspects of the system that are constantly in flux don't tend to be the parts of the system that have a major impact on the system as a whole.\n\n### **Reinforcing feedback loops emerge whenever the system can reproduce itself**\n\nIf the system has a way to create self-perpetuating behavior, you have a reinforcing feedback loop. The greater the adoption of your design system across the company, the easier it is for others to adopt it too, so the more they do, ad infinitum. The opposite is also true — the less adopted your system is, the less incentive there is to adopt, the more people diverge from the system, and the less overall adoption it has as a result. If stability is your aim, reinforcing loops need a balancing loop to bring the system back into equilibrium. Often this won't just be a single loop, but a set of many loops all working together.\n\n### **Oscillations are caused by delays in feedback loops**\n\nOscillations occur when decisions that impact inflows and outflows are made with incomplete information due to delays in feedback loops. Oscillations and delays create an unnecessary lack of stability in a system. A wild oscillation can cause overshoots in stocks, while large delays can cause a total collapse of a stock. You can determine which delays are important to focus on by understanding which oscillations most affect the system goals and then monitoring the delays that cause those oscillations\n\n### **People make decisions based off of bounded rationality**\n\nThis idea, coined by economist Herbert Simon, states that people tend to make the best decisions they can with the information they had available to them at the time. But nobody has complete information, especially in a complex system. And our biases impact our ability to make rational decisions even with the information that we do have. That being said, if we know bounded rationality exists, we can plan and account for it by getting the right information to the right place at the right time so that each individual part of the system acts in a way that builds up a pattern of behavior that's beneficial to the system as a whole.\n\n## Archetypical Problems in Systems\n\nSystem archetypes are behavioral scenarios common across many systems.These are some of the patterns that may be common to experience in design systems, though there are [several others](https://thesystemsthinker.com/applying-systems-archetypes/).\n\n### **Eroding goals / drifting performance**\n\nWhen some aspect of the system fails to reach its goals, it sets subsequent goals lower and lower over time. In subsystems, this has a ripple effect throughout the entire system. A team might start with a goal of having 100% compliance with a design system and then misses that goal. The next time around, it slowly erodes to 80%, then 60%, and so on. People tend to focus on the negative - so missing their goals by a little feels worse than how good they would have felt if they had reached their goals easily. Common excuses emerge to justify the eroding goals. \"What did you expect\" or \"Nobody is perfect\" or \"We can't be too hard on ourselves here\". To fight this, don't let up on your goals, no matter what the performance is. Try to instill a reinforcing feedback loop that works to counter the eroding goals by championing wins. That will invert perceptions so that folks are incentivized to work harder and harder the better things get rather than focusing on working less and less when things go wrong.\n\n### **Growth Limits**\n\nSubsystems may eventually run into resource limits that prevent it from further growth, even if it hasn't yet reached its goal. You might have a goal of 100% adoption, but can't seem to provide enough support to individual teams to empower the last 10% of people to finally adopt. You can avoid these limits to growth by examining growth loops and identifying potential limitations to that growth before the system runs up against them.\n\n### **Seeking the wrong goal**\n\nIf the goal you're seeking isn't well defined, or isn't properly measured, it's possible that your system will be optimized to realize an outcome that's more in line with what you measured, rather than what you expected. There's that old Eisner quote — “Not everything important is measurable, and not everything measurable is important.” If your incentives are based on quantity, you might end up with _growth_, but not _progress_. Focus on clarifying what your goals and vision for the system are **before** asking others to act on it.\n\n## How can we use our knowledge of systems to build better design systems?\n\n### **Create a model of the system**\n\nA model of a design system will be different for every organization. They'll be impacted by the teams that manage them, the complexity of the system and the applications it needs to support, the programs and support that underpins that system, and the processes and feedback loops that grow and shrink that system. There will be delays in feedback loops that impact the system's ability to respond to business change. Understanding this model and the goals of the system can expose opportunities to restructure the system to better align goals and influence a set of behaviors.\n\n### **Understand your system's paradigms**\n\nParadigms are the things that goals and structure emerge from. What does your culture consider to be the source of truth for a design system — the code or the design assets? Structures, goals, rules, and feedback loops will be dramatically different depending on where your organization stands on this issue. While it's not easy to change paradigms on a societal or cultural level quickly, it's important to know what game you're playing. Understanding these paradigms also gives your team an opportunity to buck convention in search of a model that transcends the status quo.\n\n### **Understand how information flows through the system**\n\nThe lack of information in a feedback loop, or delays that prevent people from getting the information they need to make informed decisions that impact the system can be one of the biggest factors causing a system to perform below our expectations. By providing the right kind of information to people who need it, it's easier to increase accountability. Often a failure to keep feedback loops between subsystems open is how this breaks down. This can lead to a Prisoner's Dilemma, where failure to cooperate leads to a worse outcome, even when the cost of cooperating (maintaining that feedback loop) seems expensive. Plan out how information will flow through your system and what type of delays you expect to have as a result. Identify where oscillations could occur.\n\n### **Publish the rules for self-organization**\n\nSystems that have ways to allow subsystems to adjust in light of new conditions are better equipped to weather storms that ones that go through larger, more complex parent systems. By publishing a set of rules that outline exactly when, how, and what system can modify or extend can help teams evolve in ways that aren't detrimental to the whole. Rather than creating a complex structure of rules and decision points, create simple rules that are broadly applicable across lots of other subsystems and teams that everyone can learn and internalize.\n\n### **Examine \"What If\" scenarios**\n\nOnce we have a good understanding of the structure of a system and the relative strength of feedback loops in that system, we can start to model hypothetical scenarios that can predict what would happen under certain conditions. This can help us understand how to focus our efforts on what will affect the most positive change or where we need to focus on mitigating a risk.\n\n### **Create stable, independent, hierarchical subassemblies**\n\nThe best functioning systems are the ones that have subsystems capable of regulating and maintaining themselves independently while still serving the needs of a larger system. Hierarchy of subsystems can create larger systems that are more resilient and naturally stable. Identify which aspects of your system can operate independently and reduce dependencies. Next, identify where subsystems can ladder up to larger goals.\n\nWhen lower level system goals dominate or work in opposition to the goals of the larger system, a loop arises that damages the overall system and contributes to instability. Likewise, when the highest levels of the system exert too much control on individual subsystems, those subsystems are less resilient to changes. To achieve the most stable hierarchy, balance responsibilities between subsystems and the overall system to make them more resilient.\n\n### **When long delays are present, act early**\n\nLong delays lead to system oscillations, so when delays are very long, don't wait for the problem to become obvious before making some corrective action. If you're waiting for a measurement that is attached to a long delay, you'll often make decisions too late. Act early so you have time to correct for new information when it finally does arrive. Build longer testing periods into the process of building and releasing new components. Make it easy for people to provide feedback quickly.\n\n### **If the bounded rationality of any part of the system isn't working, restructure it**\n\nIf people in the system don't have the right information, goals, or incentives to create the desired behavior for the overall system, then it isn't the fault of those people — the system itself isn't setting them up for success. Put new processes in place that facilitate a better flow of information so each person is better informed and can make decisions that benefit the system as a whole. Focus on delivering **_timely, complete information_** to the people whose decisions are most impacted by that information.\n\nWe can build more resilient design systems by improving the feedback loops between decision makers and planning for a \"margin of error\" in a design system that allows for certain drifts in the system that are easily correctable. We can also increase tolerance by increasing modularity and keeping a loose coupling between as many parts of the system as possible.\n\n## Conclusion\n\nThe thing about design systems is that they live inside of extremely complex organizations. Every design system operates inside of a little kingdom, and both the design of that system and the people who live inside of it every day are under constant change. That's what makes design systems at once so exciting and so difficult to design and maintain. I hope that this article gives you another perspective about how to think about design systems within the larger context of that living, breathing world.\n\nIf you're interested in learning more about system dynamics and systems analysis, I highly recommend the following additional reading:\n\n- [Thinking in Systems, A Primer](https://www.amazon.com/Thinking-Systems-Donella-H-Meadows/dp/1603580557)\n- [A Framework for Resilience Thinking](https://www.sciencedirect.com/science/article/pii/S1877050912000130)\n- [Introduction to Systems Thinking](https://thesystemsthinker.com/wp-content/uploads/2016/03/Introduction-to-Systems-Thinking-IMS013Epk.pdf)\n- [The Systems Thinker](https://thesystemsthinker.com/)\n",
        "type": "MarkdownRemark",
        "contentDigest": "a759f7efa938bbfc5ca12c307109f935",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "System Dynamics in Design Systems",
        "date": "2019-02-12T00:00:00.000Z",
        "_PARENT": "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md absPath of file",
        "parent": "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n## A Foreword\n\nI would like to start by acknowledging the fact that this post is incomplete and represents only my limited knowledge of systems analysis. The ideas I present here might be skewed and in some cases, rather abstract. This is partly because if I were to put these concepts into more concrete forms they lose a kind of universality that this article seeks to outline.\n\nI also recognize that this way of modeling systems assumes certain organizational structures exist inside a company that can support this methodology. This includes not only the mechanisms to collect data about the system behavior, but a team (or teams) with the time to dedicate toward understanding the behavior of the design, product, and engineering teams using the design system. It also assumes that these organizations are at a level of scale and complexity large enough to warrant even **_worrying_** about this type of thing. I'm not entirely convinced that the costs outweigh the benefits for smaller organizations, specifically because so much of what this article discusses is already sort of tacitly understood by at least some people in the org. But that doesn't mean there isn't something to be gained by rising the ocean of understanding across the board.\n\nThis article's thrust is to outline the broad strokes of systems analysis and how it relates to design systems in a way that is helpful without having to go full boar into complex system modeling or theories that aren't immediately applicable to a design organization. While it's all very fascinating, there just isn't enough space in this article to dedicate to going into the nuance. It's my hope instead that this article inspire teams to have rigorous discussions about how their design system structure is influencing behavior, and identify ways to use design systems better to reach their goals.\n\n## Designing Design Systems\n\n_TLDR: Systems give us a better understanding of the how complex, interconnected, nonlinear parts behave. If we can model it, we can use it to make better decisions in the future._\n\nLet's assume, for the sake of argument, that you already have a design system. Fabulous. As the overall complexity of that design system grows over time, it will become more and more necessary to get a better handle on exactly what the hell people are doing with it. Are your design systems actually effective at solving problems? Are you actually reaching the goals you set out to achieve? And just what are those goals, anyway? Is it to build faster and more consistently — or is that really just more of a rule or requirement you need to fulfill in order to keep the thing standing up in the first place?\n\nAll of these questions are tied up in the operational complexity of whatever organization your design system aims to serve. It could be a team or 5 for an individual surface or a team of 500. It doesn't really matter - at some point it becomes difficult to make improvements to how your design system operates without having a baseline to measure from — to have some indication one way or another if your design system is trending the organization toward its larger goal. We can't predict the future, but we can envision it, and the greater understanding we have of the world in which our design system sits and the behavior of the people who act upon it, the better decisions we can make about how to structure it, communicate it, and scale it so that it provides the most value and the least stress.\n\nOnce we understand how the system is structured and how it behaves, we can shift from asking questions like \"Is it okay for dialogs to be scrollable?\" and instead spending more of our time asking questions like \"What role should design systems play in improving product quality?\". These types of questions have longer lasting, broader impact than any single event or pattern of events could because they're necessarily future-oriented. The amount of **_leverage_** we can enact on the system goes up as we become more future oriented.\n\n![Example of the structure of design systems](understanding-structure-1d80db20-8315-4a50-9584-6e8ef0fe6bbb.svg \"Design systems structure\")\n\nDesign systems are far more than the product they export. They are educational programs and support networks, bug reporting channels, experimental projects, and so on. And there are actors in that system that will do things with that design system that we might not expect. Our ability to recognize and respond to behaviors we don't expect can impact our ability to design design systems that are resilient - systems that can grow and evolve as the company, its goals, and the people who are a part of it grow and evolve.\n\nI'll be exploring these ideas through the lens of system analysis, which is a branch of systems theory. This was all highly inspired by a book called [Thinking in Systems](https://www.amazon.com/Thinking-Systems-Donella-H-Meadows/dp/1603580557 \"Thinking in Systems\") from Donella Meadows. That book is an excellent crash course into systems theory. And many of the examples I'll use to explain some basic concepts of systems are pulled from that work or others like it. Not all my examples are directly related to design — and that's okay. Where possible, I will illustrate concepts by using simple systems with which we are all already familiar.\n\n## What is systems theory and how can it help design systems?\n\nA system is a collection of **interconnected**, organized elements that work together to produce patterns of behavior over time. E.g. A highway is a system of roads and signs and ramps organized for the purpose of maximizing efficient travel. Systems can be embedded inside of systems, so a traffic light is a subsystem within that larger road system. The individual traffic lights go on and off in a specific order and pattern that we can model. The signal's individual behavior acts on the larger roadway and the people that use those roads. The fact that they are a system isn't the interesting part — the interesting part comes into play when we understand how those individual parts of the system work together to do something meaningful. e.g. How does the addition or subtraction of a single traffic light effect congestion? We encounter all kinds of systems on a daily basis, we just don't often think of them as such. Every person you've ever met is a system of hundreds of little tiny systems all working together to help us breathe and eat and go about our days.\n\nSystems theory is the study of how systems are structured and why they do whatever it is they do by understanding their parts, relationships, and behaviors that emerge from them. If we can model a system, we can use that model to gain another perspective that can help us identify root causes to problems and in turn make better decisions. We can expose the model to rigor. We can find the places where it breaks down or find critical relationships that aren't immediately obvious.\n\nOne of the fundamental flaws with systems analysis is that a model of a system is just that - it's only a model, and that model is going to be imperfect. Often, the world in which these models live and breath is a curving set French curves of relationships that swirl and bend back on themselves in complicated ways. They are dynamic and experience perturbations we never expected and can't account for, but the better we understand a system's structure at its basic level, the more equipped we are to understand it at its most complex.\n\n## Parts of a system\n\nNot everything is a system, mind you. That pile of junk in my filing cabinet drawer - not a system, no matter how much I might try to convince you that it's an \"_organized mess_\". There are a collection of elements, sure, but they are neither connected to one another nor are they in a state of change. Nothing acts on them and they don't cause anything else to change, either. Systems have a common set of identifiable elements we can model and a set of behaviors acting on that system. Let's get a little glossary going so we don't have to fuss with what all these things mean as we get going. If you are already familiar with systems theory, you might find some of these explanations fairly reductive, but it'll give us some common ground to work our way up from:\n\n## Stocks\n\nOkay, so stocks are the quantifiable _stuff_ of a system, the _inventory_ or *goods (*though they don't need to be physical. Stock may also be things like physical energy, or patience).A stock is the bedrock of a system. Stocks in a design system might be the number of designers, engineers, and content strategists your design system is consumed by. It's the org budget, the headcount. It's also the number of people maintaining the system, the number of components, the footprint of products it supports, the amount of time available in a given week to maintain it, and so on.\n\n### **We tend to focus more on stocks than flows**\n\nWhen considering design systems, we often over-index on the volume of our stocks, e.g. the number of components in the design system, for instance, and underweight the value in managing the flows that feed those systems. It's easier to make decisions based on adoption than it is to make decisions based on the rate of divergence.\n\nIf we can understand what stocks exist in a design system and what flows influence those stocks, what goals we aim to reach by managing these feedback loops, and what rules govern those goals, we can start to form strategies on how to best manipulate our systems to reach those goals.\n\n## Flows\n\nFlows are actions which cause a stock to increase or decrease over time. Flows can either be inflows, actions which cause a stock to increase, or outflows, which cause a stock to decrease. Once we have a single flow and two stocks, we have the beginning of a relationship in that system. For example: the more births there are, the more the population increases. There is an inflow relationship between births and population. But there's more going on here, too — the greater the population, the more potential there is for more births. So there is another inflow arrow going in the other direction, too. Be apprised that inflows and outflows are often not in sync with each other, and when flows are out of balance, stocks can change. For instance, the rate of bugs incoming could easily exceed the rate at which they're being fixed.\n\n### **Stocks respond to changes in flow slowly**\n\nWhen flows change, stocks tend to be a lagging indicator of that change. Stocks have a momentum, and tend to either grow or shrink. A change in the flows can only go so fast. Even if a radical change in the flows happens, it may take time for the stock to reflect that change in any meaningful way, especially if a stock is being fed from multiple flows at once. Having an awareness of what causes flows to change can serve as an early indicator for stock shifts.\n\n## Feedback Loops\n\nFeedback loops are flow of causal connections that a stock is dependent on. Often feedback loops are flows of information about a stock that leads to a decision that influences the stock. Simply put, it's a cause-and-effect loop. Feedback loops come in several flavors depending on the behavior that they exhibit.\n\nA **reinforcing feedback** **loop** is one that creates more of a stock. It amplifies a signal. The more adoption there is of a design system in an organization, the more people advocate for its merits, and in turn the more adoption it gets. Likewise, the more attrition there is in an org, the lower the morale is, the more people leave, and so on. Reinforcing feedback loops are self-perpetuating. Unchecked, these loops can lead to exponential growth or collapse. This can be either good or bad depending on which behavior the loop is reinforcing.\n\n![Reinforcing loop diagram](reinforcingloop-f82145d2-61f4-4049-8803-c16c27b501b7.svg \"Reinforcing Loop\")\n\nA **balancing feedback loop** is one that neutralizes or balances out whatever flow is imposed on it. Balancing feedback loops are inherently goal seeking - which means that they always have a desired state they want to be in and seek to bring the system into that desirable range. Take a cup of coffee for instance. What the coffee wants, the coffee's goal, is to be the same temperature as the room it sits in.\n\n![Balancing loop diagram](frame-c1ae4280-724c-47b1-8ad1-573ab0d10d04.svg \"Balancing Loop\")\n\nThe greater the discrepancy between a balancing loop's goal and the actual level, the faster it moves toward that goal. So in our coffee example, the hotter the coffee, or the colder the room, the faster the coffee will cool.\n\n### **Feedback loops aren't equal strength**\n\nWhen you're dealing with multiple feedback loops, most of the time one loop is more dominant than the other. Sometimes these relationships can change over time, causing dominance relationships to shift. What's interesting to look at here is what the driving factors are between shifts in flows. Identifying these shift points and the factors that influence them can help you spot when a change in the system might be coming, and can help you prepare for it.\n\n## Delay\n\nDelays are exactly what they sound like: information not getting its message back into the system in a timely enough manner to affect change in the preferred way. There are more than likely delays in every feedback loop you encounter. They could be as short as minutes and as long as months of even years. Let's save a few words and look at a diagram that shows how delays impact feedback:\n\n![Delay diagram](delays-835ab793-bc15-4352-ac8b-3e4b70c7201e.svg \"Delay diagram\")\n\nIn the example above, a symptom of a larger system problem arises, and a short-term stopgap solution is implemented, which alleviates the system problem. However, a delay exists (shown as a double bar through a flow) between when a fix is issued and the downstream unintended consequences of that change that cause the issue or similar ones to come back. Strictly speaking, this diagram could have more delays that would impact timing. There could (and almost certainly would, let's be honest) be a delay between when a system problem was identified and when a solution was decided and implemented. The larger these delays are in a balancing loop, the greater the discrepancy between the inflow and outflow for that stock.\n\n## Resilience\n\nResilience is a measure of a system's ability to respond and adapt to changing conditions over time. When a sudden shock happens, are the systems that we've designed ready to absorb a deviation and still accomplish the same goals?\n\nToo often, the systems we are trying to build and maintain are too optimized for delivery. While this might have ensured we're being as efficient as possible with our time and energy, it also means we might not have managed enough for when shit hits the fan. This is often because the systems we design typically only really account for linear, incremental change. We don't take into account the possibility that radical, revolutionary change will happen. **Optimization and resilience are always in a state of tension**, because the more we optimize highly complex design systems for a particular workflow goaled around delivery within a given set of organizational structure and design patterns, the less resilient those systems become.\n\n## How do systems tend to behave?\n\nNow that we have a basic set of vocabulary we can really get started. The great thing about systems thinking is that similarly modeled systems tend to exhibit similar patterns of behavior, too. Bearing that in mind, let's talk through a few principles that tend to underpin systems.\n\n### **The most important input into a system is the one that's the most limiting**\n\nKnowing which aspect of a design system is the limiting factor is somewhat tricky. Depending on how the design system is maintained, it could be more or less related to staffing or time allocation for the maintainers. Identifying which aspects of your team structure have the greatest impact on your ability to control the health of your design system will help you understand where to put your effort. A dip in these resources can also serve as an early warning sign of systemic problems. A tree without sunlight won't grow, no matter how healthy its roots are. If there's no one around to maintain a design system, it doesn't matter how complete it is: it will slowly wilt.\n\n### **The changing aspects of a system are the ones that have the least effect on the system as a whole**\n\nChanging out the total set of components in a design system does not have much effect on whether or not it _is_ a system. It might not even have much of an affect on how the system is maintained. Likewise, changing the maintainers of that system doesn't really change whether or not there is a design system. The aspects of the system that are constantly in flux don't tend to be the parts of the system that have a major impact on the system as a whole.\n\n### **Reinforcing feedback loops emerge whenever the system can reproduce itself**\n\nIf the system has a way to create self-perpetuating behavior, you have a reinforcing feedback loop. The greater the adoption of your design system across the company, the easier it is for others to adopt it too, so the more they do, ad infinitum. The opposite is also true — the less adopted your system is, the less incentive there is to adopt, the more people diverge from the system, and the less overall adoption it has as a result. If stability is your aim, reinforcing loops need a balancing loop to bring the system back into equilibrium. Often this won't just be a single loop, but a set of many loops all working together.\n\n### **Oscillations are caused by delays in feedback loops**\n\nOscillations occur when decisions that impact inflows and outflows are made with incomplete information due to delays in feedback loops. Oscillations and delays create an unnecessary lack of stability in a system. A wild oscillation can cause overshoots in stocks, while large delays can cause a total collapse of a stock. You can determine which delays are important to focus on by understanding which oscillations most affect the system goals and then monitoring the delays that cause those oscillations\n\n### **People make decisions based off of bounded rationality**\n\nThis idea, coined by economist Herbert Simon, states that people tend to make the best decisions they can with the information they had available to them at the time. But nobody has complete information, especially in a complex system. And our biases impact our ability to make rational decisions even with the information that we do have. That being said, if we know bounded rationality exists, we can plan and account for it by getting the right information to the right place at the right time so that each individual part of the system acts in a way that builds up a pattern of behavior that's beneficial to the system as a whole.\n\n## Archetypical Problems in Systems\n\nSystem archetypes are behavioral scenarios common across many systems.These are some of the patterns that may be common to experience in design systems, though there are [several others](https://thesystemsthinker.com/applying-systems-archetypes/).\n\n### **Eroding goals / drifting performance**\n\nWhen some aspect of the system fails to reach its goals, it sets subsequent goals lower and lower over time. In subsystems, this has a ripple effect throughout the entire system. A team might start with a goal of having 100% compliance with a design system and then misses that goal. The next time around, it slowly erodes to 80%, then 60%, and so on. People tend to focus on the negative - so missing their goals by a little feels worse than how good they would have felt if they had reached their goals easily. Common excuses emerge to justify the eroding goals. \"What did you expect\" or \"Nobody is perfect\" or \"We can't be too hard on ourselves here\". To fight this, don't let up on your goals, no matter what the performance is. Try to instill a reinforcing feedback loop that works to counter the eroding goals by championing wins. That will invert perceptions so that folks are incentivized to work harder and harder the better things get rather than focusing on working less and less when things go wrong.\n\n### **Growth Limits**\n\nSubsystems may eventually run into resource limits that prevent it from further growth, even if it hasn't yet reached its goal. You might have a goal of 100% adoption, but can't seem to provide enough support to individual teams to empower the last 10% of people to finally adopt. You can avoid these limits to growth by examining growth loops and identifying potential limitations to that growth before the system runs up against them.\n\n### **Seeking the wrong goal**\n\nIf the goal you're seeking isn't well defined, or isn't properly measured, it's possible that your system will be optimized to realize an outcome that's more in line with what you measured, rather than what you expected. There's that old Eisner quote — “Not everything important is measurable, and not everything measurable is important.” If your incentives are based on quantity, you might end up with _growth_, but not _progress_. Focus on clarifying what your goals and vision for the system are **before** asking others to act on it.\n\n## How can we use our knowledge of systems to build better design systems?\n\n### **Create a model of the system**\n\nA model of a design system will be different for every organization. They'll be impacted by the teams that manage them, the complexity of the system and the applications it needs to support, the programs and support that underpins that system, and the processes and feedback loops that grow and shrink that system. There will be delays in feedback loops that impact the system's ability to respond to business change. Understanding this model and the goals of the system can expose opportunities to restructure the system to better align goals and influence a set of behaviors.\n\n### **Understand your system's paradigms**\n\nParadigms are the things that goals and structure emerge from. What does your culture consider to be the source of truth for a design system — the code or the design assets? Structures, goals, rules, and feedback loops will be dramatically different depending on where your organization stands on this issue. While it's not easy to change paradigms on a societal or cultural level quickly, it's important to know what game you're playing. Understanding these paradigms also gives your team an opportunity to buck convention in search of a model that transcends the status quo.\n\n### **Understand how information flows through the system**\n\nThe lack of information in a feedback loop, or delays that prevent people from getting the information they need to make informed decisions that impact the system can be one of the biggest factors causing a system to perform below our expectations. By providing the right kind of information to people who need it, it's easier to increase accountability. Often a failure to keep feedback loops between subsystems open is how this breaks down. This can lead to a Prisoner's Dilemma, where failure to cooperate leads to a worse outcome, even when the cost of cooperating (maintaining that feedback loop) seems expensive. Plan out how information will flow through your system and what type of delays you expect to have as a result. Identify where oscillations could occur.\n\n### **Publish the rules for self-organization**\n\nSystems that have ways to allow subsystems to adjust in light of new conditions are better equipped to weather storms that ones that go through larger, more complex parent systems. By publishing a set of rules that outline exactly when, how, and what system can modify or extend can help teams evolve in ways that aren't detrimental to the whole. Rather than creating a complex structure of rules and decision points, create simple rules that are broadly applicable across lots of other subsystems and teams that everyone can learn and internalize.\n\n### **Examine \"What If\" scenarios**\n\nOnce we have a good understanding of the structure of a system and the relative strength of feedback loops in that system, we can start to model hypothetical scenarios that can predict what would happen under certain conditions. This can help us understand how to focus our efforts on what will affect the most positive change or where we need to focus on mitigating a risk.\n\n### **Create stable, independent, hierarchical subassemblies**\n\nThe best functioning systems are the ones that have subsystems capable of regulating and maintaining themselves independently while still serving the needs of a larger system. Hierarchy of subsystems can create larger systems that are more resilient and naturally stable. Identify which aspects of your system can operate independently and reduce dependencies. Next, identify where subsystems can ladder up to larger goals.\n\nWhen lower level system goals dominate or work in opposition to the goals of the larger system, a loop arises that damages the overall system and contributes to instability. Likewise, when the highest levels of the system exert too much control on individual subsystems, those subsystems are less resilient to changes. To achieve the most stable hierarchy, balance responsibilities between subsystems and the overall system to make them more resilient.\n\n### **When long delays are present, act early**\n\nLong delays lead to system oscillations, so when delays are very long, don't wait for the problem to become obvious before making some corrective action. If you're waiting for a measurement that is attached to a long delay, you'll often make decisions too late. Act early so you have time to correct for new information when it finally does arrive. Build longer testing periods into the process of building and releasing new components. Make it easy for people to provide feedback quickly.\n\n### **If the bounded rationality of any part of the system isn't working, restructure it**\n\nIf people in the system don't have the right information, goals, or incentives to create the desired behavior for the overall system, then it isn't the fault of those people — the system itself isn't setting them up for success. Put new processes in place that facilitate a better flow of information so each person is better informed and can make decisions that benefit the system as a whole. Focus on delivering **_timely, complete information_** to the people whose decisions are most impacted by that information.\n\nWe can build more resilient design systems by improving the feedback loops between decision makers and planning for a \"margin of error\" in a design system that allows for certain drifts in the system that are easily correctable. We can also increase tolerance by increasing modularity and keeping a loose coupling between as many parts of the system as possible.\n\n## Conclusion\n\nThe thing about design systems is that they live inside of extremely complex organizations. Every design system operates inside of a little kingdom, and both the design of that system and the people who live inside of it every day are under constant change. That's what makes design systems at once so exciting and so difficult to design and maintain. I hope that this article gives you another perspective about how to think about design systems within the larger context of that living, breathing world.\n\nIf you're interested in learning more about system dynamics and systems analysis, I highly recommend the following additional reading:\n\n- [Thinking in Systems, A Primer](https://www.amazon.com/Thinking-Systems-Donella-H-Meadows/dp/1603580557)\n- [A Framework for Resilience Thinking](https://www.sciencedirect.com/science/article/pii/S1877050912000130)\n- [Introduction to Systems Thinking](https://thesystemsthinker.com/wp-content/uploads/2016/03/Introduction-to-Systems-Thinking-IMS013Epk.pdf)\n- [The Systems Thinker](https://thesystemsthinker.com/)\n",
      "fileAbsolutePath": "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md",
      "fields": {
        "slug": "/system-dynamics-in-design-systems/"
      }
    },
    "SitePage /offline-plugin-app-shell-fallback/": {
      "layout": "index",
      "jsonName": "offline-plugin-app-shell-fallback.json",
      "internalComponentName": "ComponentOfflinePluginAppShellFallback",
      "path": "/offline-plugin-app-shell-fallback/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-offline/app-shell.js",
      "componentChunkName": "component---node-modules-gatsby-plugin-offline-app-shell-js",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-offline",
      "pluginCreatorId": "Plugin gatsby-plugin-offline",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/node_modules/gatsby-plugin-offline/app-shell.js",
      "id": "SitePage /offline-plugin-app-shell-fallback/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "dae216f3505198f27ebf85723634e529",
        "description": "Plugin gatsby-plugin-offline",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /making-susy-grids-atomic/": {
      "layout": "index",
      "jsonName": "making-susy-grids-atomic.json",
      "internalComponentName": "ComponentMakingSusyGridsAtomic",
      "path": "/making-susy-grids-atomic/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/making-susy-grids-atomic/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /making-susy-grids-atomic/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7f17f25aee6a92d0d7fb36dabfaa1f99",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /fiction-writing-for-designers/": {
      "layout": "index",
      "jsonName": "fiction-writing-for-designers.json",
      "internalComponentName": "ComponentFictionWritingForDesigners",
      "path": "/fiction-writing-for-designers/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/fiction-writing-for-designers/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /fiction-writing-for-designers/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c6a907b6644db5eeed3eb907a0204a05",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /on-the-experience-of-becoming/": {
      "layout": "index",
      "jsonName": "on-the-experience-of-becoming.json",
      "internalComponentName": "ComponentOnTheExperienceOfBecoming",
      "path": "/on-the-experience-of-becoming/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/on-the-experience-of-becoming/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /on-the-experience-of-becoming/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "d72f511c73ad6b449abd17c93e074c4c",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /size-and-mass-in-design-systems/": {
      "layout": "index",
      "jsonName": "size-and-mass-in-design-systems.json",
      "internalComponentName": "ComponentSizeAndMassInDesignSystems",
      "path": "/size-and-mass-in-design-systems/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/size-and-mass-in-design-systems/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /size-and-mass-in-design-systems/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "4d32e72adb1595618b6a9e5883872948",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /programmatic-color-palettes/": {
      "layout": "index",
      "jsonName": "programmatic-color-palettes.json",
      "internalComponentName": "ComponentProgrammaticColorPalettes",
      "path": "/programmatic-color-palettes/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/programmatic-color-palettes/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /programmatic-color-palettes/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e21f2e712c3e137df342396b222f6f42",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /the-analysis-and-ontology-of-design-systems/": {
      "layout": "index",
      "jsonName": "the-analysis-and-ontology-of-design-systems.json",
      "internalComponentName": "ComponentTheAnalysisAndOntologyOfDesignSystems",
      "path": "/the-analysis-and-ontology-of-design-systems/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/the-analysis-and-ontology-of-design-systems/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /the-analysis-and-ontology-of-design-systems/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "16e3266fe0b09eb9a6e3180b1eee1464",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /the-map-is-not-the-territory/": {
      "layout": "index",
      "jsonName": "the-map-is-not-the-territory.json",
      "internalComponentName": "ComponentTheMapIsNotTheTerritory",
      "path": "/the-map-is-not-the-territory/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/the-map-is-not-the-territory/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /the-map-is-not-the-territory/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "644d0cf883cc8690768b17c21859a408",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /which-shade-of-gray-should-i-use-for-disabled-states/": {
      "layout": "index",
      "jsonName": "which-shade-of-gray-should-i-use-for-disabled-states.json",
      "internalComponentName": "ComponentWhichShadeOfGrayShouldIUseForDisabledStates",
      "path": "/which-shade-of-gray-should-i-use-for-disabled-states/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/which-shade-of-gray-should-i-use-for-disabled-states/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /which-shade-of-gray-should-i-use-for-disabled-states/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "4202413b120765a224544ccf97e0bfaf",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /why-use-system-fonts/": {
      "layout": "index",
      "jsonName": "why-use-system-fonts.json",
      "internalComponentName": "ComponentWhyUseSystemFonts",
      "path": "/why-use-system-fonts/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/why-use-system-fonts/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /why-use-system-fonts/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "3ff3eb9d9e541770984db2e3c62716f9",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /system-dynamics-in-design-systems/": {
      "layout": "index",
      "jsonName": "system-dynamics-in-design-systems.json",
      "internalComponentName": "ComponentSystemDynamicsInDesignSystems",
      "path": "/system-dynamics-in-design-systems/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "componentChunkName": "component---src-templates-post-js",
      "context": {
        "slug": "/system-dynamics-in-design-systems/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/templates/post.js",
      "id": "SitePage /system-dynamics-in-design-systems/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "0e33a802f2bf708d139ae34c8b91f8a8",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /404/": {
      "layout": "index",
      "jsonName": "404.json",
      "internalComponentName": "Component404",
      "path": "/404/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/pages/404.js",
      "componentChunkName": "component---src-pages-404-js",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-page-creator",
      "pluginCreatorId": "Plugin gatsby-plugin-page-creator",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/pages/404.js",
      "id": "SitePage /404/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "16f3f9db6c7e9a2e73025819dc60381e",
        "description": "Plugin gatsby-plugin-page-creator",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /": {
      "layout": "index",
      "jsonName": "index.json",
      "internalComponentName": "ComponentIndex",
      "path": "/",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/pages/index.js",
      "componentChunkName": "component---src-pages-index-js",
      "context": {},
      "pluginCreator___NODE": "Plugin gatsby-plugin-page-creator",
      "pluginCreatorId": "Plugin gatsby-plugin-page-creator",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/pages/index.js",
      "id": "SitePage /",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "406cc84fe2a7ef3af32ca484909d970f",
        "description": "Plugin gatsby-plugin-page-creator",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /404.html": {
      "layout": "index",
      "jsonName": "404-html.json",
      "internalComponentName": "Component404Html",
      "path": "/404.html",
      "component": "/Users/seanblanton/Documents/Sites/blanton/src/pages/404.js",
      "componentChunkName": "component---src-pages-404-js",
      "context": {},
      "pluginCreator___NODE": "Plugin prod-404",
      "pluginCreatorId": "Plugin prod-404",
      "componentPath": "/Users/seanblanton/Documents/Sites/blanton/src/pages/404.js",
      "id": "SitePage /404.html",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "91c6fa6093444a519c73660bd42ad154",
        "description": "Plugin prod-404",
        "owner": "internal-data-bridge"
      }
    }
  },
  "status": {
    "plugins": {},
    "PLUGINS_HASH": "9a893b34804b990ec1521307d0846492"
  },
  "componentDataDependencies": {
    "nodes": {
      "Site": [
        "/making-susy-grids-atomic/",
        "/fiction-writing-for-designers/",
        "/system-dynamics-in-design-systems/",
        "/on-the-experience-of-becoming/",
        "/size-and-mass-in-design-systems/",
        "/programmatic-color-palettes/",
        "/the-analysis-and-ontology-of-design-systems/",
        "/the-map-is-not-the-territory/",
        "/which-shade-of-gray-should-i-use-for-disabled-states/",
        "/why-use-system-fonts/",
        "/",
        "LAYOUT___index"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/making-susy-grids-atomic.md absPath of file >>> MarkdownRemark": [
        "/making-susy-grids-atomic/"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/fiction-writing-for-designers.md absPath of file >>> MarkdownRemark": [
        "/fiction-writing-for-designers/"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/system-dynamics-in-design-systems.md absPath of file >>> MarkdownRemark": [
        "/system-dynamics-in-design-systems/"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/on-the-experience-of-becoming.md absPath of file >>> MarkdownRemark": [
        "/on-the-experience-of-becoming/"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/size-and-mass-in-design-systems.md absPath of file >>> MarkdownRemark": [
        "/size-and-mass-in-design-systems/"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/programmatic-color-palettes.md absPath of file >>> MarkdownRemark": [
        "/programmatic-color-palettes/"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-analysis-and-ontology-of-design-systems.md absPath of file >>> MarkdownRemark": [
        "/the-analysis-and-ontology-of-design-systems/"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/the-map-is-not-the-territory.md absPath of file >>> MarkdownRemark": [
        "/the-map-is-not-the-territory/"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/which-shade-of-gray-should-i-use-for-disabled-states.md absPath of file >>> MarkdownRemark": [
        "/which-shade-of-gray-should-i-use-for-disabled-states/"
      ],
      "/Users/seanblanton/Documents/Sites/blanton/src/posts/why-use-system-fonts.md absPath of file >>> MarkdownRemark": [
        "/why-use-system-fonts/"
      ]
    },
    "connections": {
      "SitePage": [
        "/dev-404-page/"
      ],
      "MarkdownRemark": [
        "/"
      ]
    }
  }
}