{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport Atoms from \"@/system/atoms\";\nimport { default as palenight } from \"prism-react-renderer/themes/palenight\";\nimport styled from \"@emotion/styled\";\nconst Wrapper = styled.pre`\n  position: relative;\n  overflow: hidden;\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: var(--accent-color);\n    opacity: var(--accent-opacity);\n    z-index: -1;\n  }\n`;\nexport default function Code(props) {\n  const {\n    children,\n    className\n  } = props;\n  const language = className === null || className === void 0 ? void 0 : className.replace(/language-/, \"\");\n  return __jsx(Highlight, _extends({}, defaultProps, {\n    theme: palenight,\n    code: children,\n    language: language\n  }), (_ref) => {\n    let {\n      className,\n      style: {\n        backgroundColor\n      },\n      tokens,\n      getLineProps,\n      getTokenProps\n    } = _ref,\n        otherStyles = _objectWithoutProperties(_ref.style, [\"backgroundColor\"]);\n\n    return __jsx(Wrapper, {\n      className: className,\n      style: _objectSpread(_objectSpread({\n        backgroundColor: `transparent`\n      }, otherStyles), {}, {\n        borderRadius: Atoms.borderRadius.medium,\n        padding: Atoms.spacing.medium\n      })\n    }, tokens.map((line, i) => __jsx(\"div\", _extends({\n      key: i\n    }, getLineProps({\n      line,\n      key: i\n    })), line.map((token, key) => __jsx(\"span\", _extends({\n      key: key\n    }, getTokenProps({\n      token,\n      key\n    })))))));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}