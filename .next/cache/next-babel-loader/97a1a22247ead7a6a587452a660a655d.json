{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport read from \"fs-readdir-recursive\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport externalPosts from \"../data/externalPosts.js\";\nconst POSTS_DIR = path.join(process.cwd(), \"src/blog\");\nconst filenames = read(POSTS_DIR);\nconst formattedExternal = new Map(externalPosts.map(post => {\n  const options = {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\"\n  };\n  const formattedDate = new Date(post.date).toLocaleDateString(\"en-IN\", options);\n  return {\n    frontMatter: {\n      title: post.title,\n      date: formattedDate\n    }\n  };\n}));\nexport const postsData = new Map(filenames.map(filename => {\n  const filePath = path.join(POSTS_DIR, filename);\n  const rawPost = fs.readFileSync(filePath, \"utf8\");\n  const {\n    content,\n    data\n  } = matter(rawPost);\n  const slug = filePath.replace(/^.*\\/blog\\//, \"\").replace(\".mdx\", \"\");\n  const options = {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\"\n  };\n  const formattedDate = new Date(data.date).toLocaleDateString(\"en-IN\", options);\n  return {\n    content,\n    frontMatter: _objectSpread(_objectSpread({}, data), {}, {\n      title: data.title,\n      date: formattedDate\n    }),\n    slug,\n    path: filePath\n  };\n}).map(entry => {\n  const {\n    slug\n  } = entry;\n  return [slug, entry];\n}));\nexport default postsData;","map":null,"metadata":{},"sourceType":"module"}