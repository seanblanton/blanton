{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport Atoms from \"@/system/atoms\";\nimport paleNight from \"prism-react-renderer/themes/paleNight\";\nexport default function Code(props) {\n  const {\n    children,\n    className\n  } = props;\n  const language = className === null || className === void 0 ? void 0 : className.replace(/language-/, \"\");\n  return __jsx(Highlight, _extends({}, defaultProps, {\n    theme: paleNight,\n    code: children,\n    language: language\n  }), ({\n    className,\n    style,\n    tokens,\n    getLineProps,\n    getTokenProps\n  }) => __jsx(\"pre\", {\n    className: className,\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      borderRadius: 16,\n      padding: Atoms.spacing.medium\n    })\n  }, tokens.map((line, i) => __jsx(\"div\", _extends({\n    key: i\n  }, getLineProps({\n    line,\n    key: i\n  })), line.map((token, key) => __jsx(\"span\", _extends({\n    key: key\n  }, getTokenProps({\n    token,\n    key\n  }))))))));\n}","map":null,"metadata":{},"sourceType":"module"}