{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/seanblanton/Documents/Sites/blanton/components/system/ThemeProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect } from \"react\";\nimport useLocalStorage from \"@/utils/useLocalStorage\";\nvar DEFAULT_MODE = \"dark\";\nvar DEFAULT_THEME = \"autumn\";\nexport var ThemeContext = /*#__PURE__*/React.createContext({});\n\nvar ThemeProvider = function ThemeProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useLocalStorage = useLocalStorage(\"mode\", DEFAULT_MODE),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      mode = _useLocalStorage2[0],\n      setMode = _useLocalStorage2[1];\n\n  var _useLocalStorage3 = useLocalStorage(\"theme\", DEFAULT_THEME),\n      _useLocalStorage4 = _slicedToArray(_useLocalStorage3, 2),\n      theme = _useLocalStorage4[0],\n      setTheme = _useLocalStorage4[1];\n\n  var toggleMode = function toggleMode() {\n    mode === \"light\" ? setMode(\"dark\") : setMode(\"light\");\n  };\n\n  function toggleTheme(name) {\n    setTheme(name);\n  }\n\n  var updateTheme = function updateTheme() {\n    var currentTheme = \"\".concat(theme, \"-\").concat(mode);\n    document.documentElement.className = currentTheme;\n  };\n\n  useEffect(function () {\n    updateTheme();\n  });\n  return __jsx(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      mode: mode,\n      toggleTheme: toggleTheme,\n      toggleMode: toggleMode\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, children);\n};\n\n_s(ThemeProvider, \"dzPibPFMeSJPF3R1j55A8pit1vA=\", false, function () {\n  return [useLocalStorage, useLocalStorage];\n});\n\n_c = ThemeProvider;\nexport default ThemeProvider;\nexport var useThemeContext = function useThemeContext() {\n  _s2();\n\n  return useContext(ThemeContext);\n};\n\n_s2(useThemeContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Users/seanblanton/Documents/Sites/blanton/components/system/ThemeProvider.tsx"],"names":["React","useContext","useEffect","useLocalStorage","DEFAULT_MODE","DEFAULT_THEME","ThemeContext","createContext","ThemeProvider","children","mode","setMode","theme","setTheme","toggleMode","toggleTheme","name","updateTheme","currentTheme","document","documentElement","className","useThemeContext"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAYA,IAAMC,YAAY,GAAG,MAArB;AACA,IAAMC,aAAa,GAAG,QAAtB;AAEA,OAAO,IAAMC,YAAY,gBAAGN,KAAK,CAACO,aAAN,CAAoB,EAApB,CAArB;;AAEP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAA2C;AAAA;;AAAA,MAAxCC,QAAwC,QAAxCA,QAAwC;;AAAA,yBACvCN,eAAe,CAAC,MAAD,EAASC,YAAT,CADwB;AAAA;AAAA,MACxDM,IADwD;AAAA,MAClDC,OADkD;;AAAA,0BAErCR,eAAe,CAAC,OAAD,EAAUE,aAAV,CAFsB;AAAA;AAAA,MAExDO,KAFwD;AAAA,MAEjDC,QAFiD;;AAI/D,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBJ,IAAAA,IAAI,KAAK,OAAT,GAAmBC,OAAO,CAAC,MAAD,CAA1B,GAAqCA,OAAO,CAAC,OAAD,CAA5C;AACD,GAFD;;AAIA,WAASI,WAAT,CAA0CC,IAA1C,EAAmD;AACjDH,IAAAA,QAAQ,CAACG,IAAD,CAAR;AACD;;AAED,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAMC,YAAY,aAAMN,KAAN,cAAeF,IAAf,CAAlB;AACAS,IAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,GAAqCH,YAArC;AACD,GAHD;;AAKAhB,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,WAAW;AACZ,GAFQ,CAAT;AAIA,SACE,MAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEL,MAAAA,KAAK,EAALA,KAAF;AAASF,MAAAA,IAAI,EAAJA,IAAT;AAAeK,MAAAA,WAAW,EAAXA,WAAf;AAA4BD,MAAAA,UAAU,EAAVA;AAA5B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QADH,CADF;AAKD,CA1BD;;GAAMD,a;UACoBL,e,EACEA,e;;;KAFtBK,a;AA4BN,eAAeA,aAAf;AAEA,OAAO,IAAMc,eAAe,GAAG,SAAlBA,eAAkB;AAAA;;AAAA,SAAMrB,UAAU,CAACK,YAAD,CAAhB;AAAA,CAAxB;;IAAMgB,e","sourcesContent":["import React, { ReactNode, useContext, useEffect } from \"react\";\nimport useLocalStorage from \"@/utils/useLocalStorage\";\nexport type ThemeName = \"spring\" | \"summer\" | \"autumn\" | \"winter\";\n\ntype Mode = \"light\" | \"dark\";\n\ninterface ThemeProviderType {\n  theme: ThemeName;\n  mode: Mode;\n  toggleTheme: (name: ThemeName) => void;\n  toggleMode: () => void;\n}\n\nconst DEFAULT_MODE = \"dark\";\nconst DEFAULT_THEME = \"autumn\";\n\nexport const ThemeContext = React.createContext({} as ThemeProviderType);\n\nconst ThemeProvider = ({ children }: { children: ReactNode }) => {\n  const [mode, setMode] = useLocalStorage(\"mode\", DEFAULT_MODE);\n  const [theme, setTheme] = useLocalStorage(\"theme\", DEFAULT_THEME);\n\n  const toggleMode = () => {\n    mode === \"light\" ? setMode(\"dark\") : setMode(\"light\");\n  };\n\n  function toggleTheme<T extends ThemeName>(name: T) {\n    setTheme(name);\n  }\n\n  const updateTheme = () => {\n    const currentTheme = `${theme}-${mode}`;\n    document.documentElement.className = currentTheme;\n  };\n\n  useEffect(() => {\n    updateTheme();\n  });\n\n  return (\n    <ThemeContext.Provider value={{ theme, mode, toggleTheme, toggleMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n\nexport const useThemeContext = () => useContext(ThemeContext);\n"]},"metadata":{},"sourceType":"module"}