{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport read from \"fs-readdir-recursive\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport externalPosts from \"../data/externalPosts.js\";\nconst POSTS_DIR = path.join(process.cwd(), \"src/blog\");\nconst filenames = read(POSTS_DIR);\nconst formattedExternal = new Map(externalPosts.map(post => {\n  const options = {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\"\n  };\n  const formattedDate = new Date(post.date).toLocaleDateString(\"en-IN\", options);\n  return {\n    frontMatter: {\n      title: post.title,\n      date: formattedDate\n    }\n  };\n}));\nexport const postsData = new Map(filenames.map(filename => {\n  const filePath = path.join(POSTS_DIR, filename);\n  const rawPost = fs.readFileSync(filePath, \"utf8\");\n  const {\n    content,\n    data\n  } = matter(rawPost);\n  const slug = filePath.replace(/^.*\\/blog\\//, \"\").replace(\".mdx\", \"\");\n  const options = {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\"\n  };\n  const formattedDate = new Date(data.date).toLocaleDateString(\"en-IN\", options);\n  return {\n    content,\n    frontMatter: _objectSpread(_objectSpread({}, data), {}, {\n      title: data.title,\n      date: formattedDate\n    }),\n    slug,\n    path: filePath\n  };\n}).map(entry => {\n  const {\n    slug\n  } = entry;\n  return [slug, entry];\n}));\nexport default postsData;","map":{"version":3,"sources":["/Users/seanblanton/Documents/Sites/blanton/utils/index.js"],"names":["fs","read","path","matter","externalPosts","POSTS_DIR","join","process","cwd","filenames","formattedExternal","Map","map","post","options","month","day","year","formattedDate","Date","date","toLocaleDateString","frontMatter","title","postsData","filename","filePath","rawPost","readFileSync","content","data","slug","replace","entry"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AAGA,MAAMC,SAAS,GAAGH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB,CAAlB;AACA,MAAMC,SAAS,GAAGR,IAAI,CAACI,SAAD,CAAtB;AAEA,MAAMK,iBAAiB,GAAG,IAAIC,GAAJ,CACtBP,aAAa,CAACQ,GAAd,CAAmBC,IAAD,IAAU;AAExB,QAAMC,OAAO,GAAG;AAAEC,IAAAA,KAAK,EAAE,MAAT;AAAiBC,IAAAA,GAAG,EAAE,SAAtB;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GAAhB;AACA,QAAMC,aAAa,GAAG,IAAIC,IAAJ,CAASN,IAAI,CAACO,IAAd,EAAoBC,kBAApB,CACpB,OADoB,EAEpBP,OAFoB,CAAtB;AAKA,SAAO;AACHQ,IAAAA,WAAW,EAAE;AACTC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KADH;AAETH,MAAAA,IAAI,EAAEF;AAFG;AADV,GAAP;AAOH,CAfD,CADsB,CAA1B;AAmBA,OAAO,MAAMM,SAAS,GAAG,IAAIb,GAAJ,CACrBF,SAAS,CAACG,GAAV,CAAea,QAAD,IAAc;AACxB,QAAMC,QAAQ,GAAGxB,IAAI,CAACI,IAAL,CAAUD,SAAV,EAAqBoB,QAArB,CAAjB;AACA,QAAME,OAAO,GAAG3B,EAAE,CAAC4B,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAAhB;AACA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoB3B,MAAM,CAACwB,OAAD,CAAhC;AAEA,QAAMI,IAAI,GAAGL,QAAQ,CAACM,OAAT,CAAiB,aAAjB,EAAgC,EAAhC,EAAoCA,OAApC,CAA4C,MAA5C,EAAoD,EAApD,CAAb;AAEA,QAAMlB,OAAO,GAAG;AAAEC,IAAAA,KAAK,EAAE,MAAT;AAAiBC,IAAAA,GAAG,EAAE,SAAtB;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GAAhB;AACA,QAAMC,aAAa,GAAG,IAAIC,IAAJ,CAASW,IAAI,CAACV,IAAd,EAAoBC,kBAApB,CACpB,OADoB,EAEpBP,OAFoB,CAAtB;AAKA,SAAO;AACHe,IAAAA,OADG;AAEHP,IAAAA,WAAW,kCACJQ,IADI;AAEPP,MAAAA,KAAK,EAAEO,IAAI,CAACP,KAFL;AAGPH,MAAAA,IAAI,EAAEF;AAHC,MAFR;AAOHa,IAAAA,IAPG;AAQH7B,IAAAA,IAAI,EAAEwB;AARH,GAAP;AAUH,CAvBD,EAwBCd,GAxBD,CAwBMqB,KAAD,IAAW;AACZ,QAAM;AAAEF,IAAAA;AAAF,MAAWE,KAAjB;AACE,SAAO,CAACF,IAAD,EAAOE,KAAP,CAAP;AACL,CA3BD,CADqB,CAAlB;AA+BP,eAAeT,SAAf","sourcesContent":["import fs from \"fs\";\nimport read from \"fs-readdir-recursive\"\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport externalPosts from \"../data/externalPosts.js\";\n\n\nconst POSTS_DIR = path.join(process.cwd(), \"src/blog\");\nconst filenames = read(POSTS_DIR)\n\nconst formattedExternal = new Map(\n    externalPosts.map((post) => {\n\n        const options = { month: \"long\", day: \"numeric\", year: \"numeric\" };\n        const formattedDate = new Date(post.date).toLocaleDateString(\n          \"en-IN\",\n          options\n        );\n\n        return {\n            frontMatter: {\n                title: post.title,\n                date: formattedDate\n            }\n            \n        }\n    })\n)\n\nexport const postsData = new Map(\n    filenames.map((filename) => {\n        const filePath = path.join(POSTS_DIR, filename);\n        const rawPost = fs.readFileSync(filePath, \"utf8\");\n        const { content, data } = matter(rawPost);\n\n        const slug = filePath.replace(/^.*\\/blog\\//, \"\").replace(\".mdx\", \"\")\n\n        const options = { month: \"long\", day: \"numeric\", year: \"numeric\" };\n        const formattedDate = new Date(data.date).toLocaleDateString(\n          \"en-IN\",\n          options\n        );\n\n        return {\n            content,\n            frontMatter: {\n                ...data,\n                title: data.title,\n                date: formattedDate,\n            },\n            slug,\n            path: filePath\n        }\n    })\n    .map((entry) => {\n        const { slug } = entry\n          return [slug, entry]\n    })\n)\n\nexport default postsData;\n"]},"metadata":{},"sourceType":"module"}