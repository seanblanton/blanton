{"ast":null,"code":"var _jsxFileName = \"/Users/seanblanton/Documents/Sites/blanton/components/system/ThemeProvider.tsx\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect } from \"react\";\nimport useLocalStorage from \"@/utils/useLocalStorage\";\nconst DEFAULT_MODE = \"light\";\nconst DEFAULT_THEME = \"autumn\";\nexport const ThemeContext = /*#__PURE__*/React.createContext({});\n\nconst ThemeProvider = ({\n  children\n}) => {\n  const [mode, setMode] = useLocalStorage(\"mode\", DEFAULT_MODE);\n  const [theme, setTheme] = useLocalStorage(\"theme\", DEFAULT_THEME);\n\n  const toggleMode = () => {\n    mode === \"light\" ? setMode(\"dark\") : setMode(\"light\");\n  };\n\n  function toggleTheme(name) {\n    setTheme(name);\n  }\n\n  const updateTheme = () => {\n    const currentTheme = `${theme}-${mode}`;\n    document.documentElement.className = currentTheme;\n  };\n\n  useEffect(() => {\n    updateTheme();\n  });\n  return __jsx(ThemeContext.Provider, {\n    value: {\n      theme,\n      mode,\n      toggleTheme,\n      toggleMode\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default ThemeProvider;\nexport const useThemeContext = () => useContext(ThemeContext);","map":{"version":3,"sources":["/Users/seanblanton/Documents/Sites/blanton/components/system/ThemeProvider.tsx"],"names":["React","useContext","useEffect","useLocalStorage","DEFAULT_MODE","DEFAULT_THEME","ThemeContext","createContext","ThemeProvider","children","mode","setMode","theme","setTheme","toggleMode","toggleTheme","name","updateTheme","currentTheme","document","documentElement","className","useThemeContext"],"mappings":";;AAAA,OAAOA,KAAP,IAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAYA,MAAMC,YAAY,GAAG,OAArB;AACA,MAAMC,aAAa,GAAG,QAAtB;AAEA,OAAO,MAAMC,YAAY,gBAAGN,KAAK,CAACO,aAAN,CAAoB,EAApB,CAArB;;AAEP,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA2C;AAC/D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,eAAe,CAAC,MAAD,EAASC,YAAT,CAAvC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBV,eAAe,CAAC,OAAD,EAAUE,aAAV,CAAzC;;AAEA,QAAMS,UAAU,GAAG,MAAM;AACvBJ,IAAAA,IAAI,KAAK,OAAT,GAAmBC,OAAO,CAAC,MAAD,CAA1B,GAAqCA,OAAO,CAAC,OAAD,CAA5C;AACD,GAFD;;AAIA,WAASI,WAAT,CAA0CC,IAA1C,EAAmD;AACjDH,IAAAA,QAAQ,CAACG,IAAD,CAAR;AACD;;AAED,QAAMC,WAAW,GAAG,MAAM;AACxB,UAAMC,YAAY,GAAI,GAAEN,KAAM,IAAGF,IAAK,EAAtC;AACAS,IAAAA,QAAQ,CAACC,eAAT,CAAyBC,SAAzB,GAAqCH,YAArC;AACD,GAHD;;AAKAhB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,WAAW;AACZ,GAFQ,CAAT;AAIA,SACE,MAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEL,MAAAA,KAAF;AAASF,MAAAA,IAAT;AAAeK,MAAAA,WAAf;AAA4BD,MAAAA;AAA5B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QADH,CADF;AAKD,CA1BD;;AA4BA,eAAeD,aAAf;AAEA,OAAO,MAAMc,eAAe,GAAG,MAAMrB,UAAU,CAACK,YAAD,CAAxC","sourcesContent":["import React, { ReactNode, useContext, useEffect } from \"react\";\nimport useLocalStorage from \"@/utils/useLocalStorage\";\nexport type ThemeName = \"spring\" | \"summer\" | \"autumn\" | \"winter\";\n\ntype Mode = \"light\" | \"dark\";\n\ninterface ThemeProviderType {\n  theme: ThemeName;\n  mode: Mode;\n  toggleTheme: (name: ThemeName) => void;\n  toggleMode: () => void;\n}\n\nconst DEFAULT_MODE = \"light\";\nconst DEFAULT_THEME = \"autumn\";\n\nexport const ThemeContext = React.createContext({} as ThemeProviderType);\n\nconst ThemeProvider = ({ children }: { children: ReactNode }) => {\n  const [mode, setMode] = useLocalStorage(\"mode\", DEFAULT_MODE);\n  const [theme, setTheme] = useLocalStorage(\"theme\", DEFAULT_THEME);\n\n  const toggleMode = () => {\n    mode === \"light\" ? setMode(\"dark\") : setMode(\"light\");\n  };\n\n  function toggleTheme<T extends ThemeName>(name: T) {\n    setTheme(name);\n  }\n\n  const updateTheme = () => {\n    const currentTheme = `${theme}-${mode}`;\n    document.documentElement.className = currentTheme;\n  };\n\n  useEffect(() => {\n    updateTheme();\n  });\n\n  return (\n    <ThemeContext.Provider value={{ theme, mode, toggleTheme, toggleMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n\nexport const useThemeContext = () => useContext(ThemeContext);\n"]},"metadata":{},"sourceType":"module"}