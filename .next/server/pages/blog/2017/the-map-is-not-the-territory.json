{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Design systems have done much in terms of advocating for and advancing collective thought towards the notion of component-based design and development strategy. By documenting patterns and discussing the application and extension of those patterns, the design system has established a kind of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"figure-ground\"), \" relationship between the things that are and are not a part of that system. What is, is recorded, and what is recorded describes what their is.\"), mdx(\"p\", null, \"But a design system is not a library of sketch symbols neatly arranged on an infinite canvas, nor is it a folder of components, or set of pre-made templates. It\\u2019s not the dos or the don\\u2019ts. And while design systems that are generated from code tend to be easier to maintain and describe a more \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"accurate\"), \" representation of what can actually be put into production for other people to use, than those drawn by hand in vector, assuming that a generated design system would be an ultimate source of truth will result in a design system with an equally narrow field of view as its inverse. The component itself, drawn or coded, has very few inherit \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"principles\"), \", beyond its affordances, which describe what is known about it. For us to truly \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"know\"), \" any object, we need to know about every occurrence of that object. To do this would mean to edge slowly closer towards a system as lumbering as the application to which it represents.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A map is not the territory it represents, but, if correct, it has a similar structure to the territory, which accounts for its usefulness. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u2013 Alfred Korzybski, Science and Sanity (1933, p. 58)\"))), mdx(\"p\", null, \"We would do well to keep Korzybski in mind when referencing what a design system is and how accurately a design system should seek to represent its application blow-by-blow.\"), mdx(\"p\", null, \"Nothing can be devoid of place and time. For a thing to exist, it must exist at a particular point and place in time. Design systems describe not objects, but \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"possible\"), \" objects, stripped down and generalized, and do not necessarily reference the relation of an object to its environment. These generalized concepts are things that cannot be fully described until the moment in which they exist again. Only though the application of a pattern in a particular situation can we truly say whether or not that pattern is a well-executed application of a system. The application of most parts of a design system are esoteric, and can only be described though metaphor.\"), mdx(\"p\", null, \"Design system are not rigid rules to be followed. They\\u2019re more like sketches, gesture drawings that suggest a shape, a texture, a quality. They are the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"map\"), \". They help guide us towards the right reality, but they are not in and of themselves \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"the\"), \" reality. So it seems that the best way to describe a design system is spend an equal amount of time not just documenting any given object, but documenting the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"application\"), \" of that object in time and space and in concert with all the objects it interacts with. But this is still not the territory. If we go through the process of naming and describing and cataloging a portion of the interface with the intent that the end result is a perfect depiction of the territory of that which it represents, we cannot ever reach objective truth. Any description of any interface would be done with a specifically chosen taxonomy to describe and account for that interface, and the very act of choosing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"what\"), \" to say is also a choice of what \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" to say. We can then look at that map and ask ourselves \\u201Cwhat does this map represent?\\u201D and thus, we only make another map. Again and again, on and on.\"), mdx(\"p\", null, \"Design systems should aim to tell \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"stories\"), \", organized through \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"patterns\"), \", which set up scenarios and suggested outcomes. Throughout the description of these patterns, the design system will reference other patterns. Some of these patterns may be more or less gestural than others. When a design that utilizes that design system is being iterated upon, the system should serve as a guide towards more consistent outcomes. When the design is finalized, if a real pattern or object cannot be well-described through a design system, then either the object or the system should be modified to be rationalized through the order of the system, carefully minding that the design system not grow to such immense precision that it reaches an unusable size. I believe this is how design systems can be malleable to new ideas without becoming a tome of prescriptive specificity that everyone dreads.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">Design systems have done much in terms of advocating for and advancing collective thought towards the notion of component-based design and development strategy. By documenting patterns and discussing the application and extension of those patterns, the design system has established a kind of <strong>figure-ground</strong> relationship between the things that are and are not a part of that system. What is, is recorded, and what is recorded describes what their is.</div><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">But a design system is not a library of sketch symbols neatly arranged on an infinite canvas, nor is it a folder of components, or set of pre-made templates. It’s not the dos or the don’ts. And while design systems that are generated from code tend to be easier to maintain and describe a more <strong>accurate</strong> representation of what can actually be put into production for other people to use, than those drawn by hand in vector, assuming that a generated design system would be an ultimate source of truth will result in a design system with an equally narrow field of view as its inverse. The component itself, drawn or coded, has very few inherit <em>principles</em>, beyond its affordances, which describe what is known about it. For us to truly <em>know</em> any object, we need to know about every occurrence of that object. To do this would mean to edge slowly closer towards a system as lumbering as the application to which it represents.</div><style data-emotion=\"css 1jys24x\">.css-1jys24x{position:relative;overflow:hidden;border-radius:0.75rem;padding:1.25rem;line-height:1.5;margin-top:1.875rem;margin-bottom:1.875rem;background-blend-mode:difference;}.css-1jys24x>:last-child{margin-bottom:unset!important;}.css-1jys24x:before{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background:var(--text-color);opacity:0.05;}</style><blockquote class=\"css-1jys24x\"><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">A map is not the territory it represents, but, if correct, it has a similar structure to the territory, which accounts for its usefulness. <strong>– Alfred Korzybski, Science and Sanity (1933, p. 58)</strong></div></blockquote><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">We would do well to keep Korzybski in mind when referencing what a design system is and how accurately a design system should seek to represent its application blow-by-blow.</div><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">Nothing can be devoid of place and time. For a thing to exist, it must exist at a particular point and place in time. Design systems describe not objects, but <em>possible</em> objects, stripped down and generalized, and do not necessarily reference the relation of an object to its environment. These generalized concepts are things that cannot be fully described until the moment in which they exist again. Only though the application of a pattern in a particular situation can we truly say whether or not that pattern is a well-executed application of a system. The application of most parts of a design system are esoteric, and can only be described though metaphor.</div><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">Design system are not rigid rules to be followed. They’re more like sketches, gesture drawings that suggest a shape, a texture, a quality. They are the <em>map</em>. They help guide us towards the right reality, but they are not in and of themselves <em>the</em> reality. So it seems that the best way to describe a design system is spend an equal amount of time not just documenting any given object, but documenting the <em>application</em> of that object in time and space and in concert with all the objects it interacts with. But this is still not the territory. If we go through the process of naming and describing and cataloging a portion of the interface with the intent that the end result is a perfect depiction of the territory of that which it represents, we cannot ever reach objective truth. Any description of any interface would be done with a specifically chosen taxonomy to describe and account for that interface, and the very act of choosing <em>what</em> to say is also a choice of what <em>not</em> to say. We can then look at that map and ask ourselves “what does this map represent?” and thus, we only make another map. Again and again, on and on.</div><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">Design systems should aim to tell <strong>stories</strong>, organized through <strong>patterns</strong>, which set up scenarios and suggested outcomes. Throughout the description of these patterns, the design system will reference other patterns. Some of these patterns may be more or less gestural than others. When a design that utilizes that design system is being iterated upon, the system should serve as a guide towards more consistent outcomes. When the design is finalized, if a real pattern or object cannot be well-described through a design system, then either the object or the system should be modified to be rationalized through the order of the system, carefully minding that the design system not grow to such immense precision that it reaches an unusable size. I believe this is how design systems can be malleable to new ideas without becoming a tome of prescriptive specificity that everyone dreads.</div>","scope":{}},"frontMatter":{"title":"The Map Is Not The Territory","date":"14 September 2017","excerpt":"How can design systems guide teams in the right direction and remain flexible at the same time?"}},"__N_SSG":true}