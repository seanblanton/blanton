{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today I'm releasing my very first open source project. Albeit tiny, I wanted to share it with the world. I hacked on this over a weekend while trying to refactor my site to make the css a little leaner.\"), mdx(\"p\", null, \"For a while now I've been using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://susy.oddbird.net\"\n  }), \"Susy Grids\"), \" to prototype both personal and professional work. Susy grids are great for designing responsive layouts quickly in the browser. I often find that I have a hard time conceptulizing how content will react to breakpoints. I can make static mockups at several sizes, but my intuition is often wrong. Susy grids help fix the problem by allowing me to experiment early.\"), mdx(\"p\", null, \"But Susy and I weren't getting along with how I wanted to write CSS when it came to dealing with media queries and breakpoints. I was stuck constructing grid component media queries with OOCSS, which wasn't jiving with my interests in utility classes (inspired by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.basscss.com\"\n  }), \"BassCSS\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.tachyons.io\"\n  }), \"Tachyons\"), \" )\"), mdx(\"p\", null, \"I wrote Susy Bricks as a module to extend Susy's mixins into atomic classes at multiple breakpoints using the prefixes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".xs\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".sm\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".md\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".lg\"), \" to quickly adjust layouts without even having to touch css. Here's an example below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div class=\\\"box xs-span12 md-span6 lg-span3\\\" />\\n\")), mdx(\"p\", null, \"To give credit where credit is due, I did look to Buzzfeed's \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://solid.buzzfeed.com\"\n  }), \"Solid\"), \" to help me get the prefixing mixin off the ground.\"), mdx(\"p\", null, \"I've been tryin to find better ways to organize my CSS, and this is a step in the right direction. I hope to continue to work on this in the future. Right now, this module only works with the most vanilla version of Susy (which is all I've really used Susy for), but I'd love for it to be more robust in the future.\"), mdx(\"p\", null, \"Check it out over on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/seanblanton/susybricks\"\n  }), \"Github\"), \" if you'd like to play around with it\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">Today I&#x27;m releasing my very first open source project. Albeit tiny, I wanted to share it with the world. I hacked on this over a weekend while trying to refactor my site to make the css a little leaner.</div><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">For a while now I&#x27;ve been using <style data-emotion=\"css 68qlq5\">.css-68qlq5{display:inline;cursor:pointer;}.css-68qlq5 a:hover{-webkit-text-decoration:underline;text-decoration:underline;}</style><span class=\"css-68qlq5\"><a href=\"http://susy.oddbird.net\" target=\"_blank\">Susy Grids</a></span> to prototype both personal and professional work. Susy grids are great for designing responsive layouts quickly in the browser. I often find that I have a hard time conceptulizing how content will react to breakpoints. I can make static mockups at several sizes, but my intuition is often wrong. Susy grids help fix the problem by allowing me to experiment early.</div><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">But Susy and I weren&#x27;t getting along with how I wanted to write CSS when it came to dealing with media queries and breakpoints. I was stuck constructing grid component media queries with OOCSS, which wasn&#x27;t jiving with my interests in utility classes (inspired by <style data-emotion=\"css 68qlq5\">.css-68qlq5{display:inline;cursor:pointer;}.css-68qlq5 a:hover{-webkit-text-decoration:underline;text-decoration:underline;}</style><span class=\"css-68qlq5\"><a href=\"http://www.basscss.com\" target=\"_blank\">BassCSS</a></span> and <span class=\"css-68qlq5\"><a href=\"http://www.tachyons.io\" target=\"_blank\">Tachyons</a></span> )</div><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">I wrote Susy Bricks as a module to extend Susy&#x27;s mixins into atomic classes at multiple breakpoints using the prefixes <code>.xs</code>, <code>.sm</code>, <code>.md</code>, and <code>.lg</code> to quickly adjust layouts without even having to touch css. Here&#x27;s an example below.</div><style data-emotion=\"css rv4j2x\">.css-rv4j2x{font-family:Consolas,Monaco,'Lucida Console','Liberation Mono','Monaco',monospace;line-height:1.5;white-space:pre;margin-bottom:1.25rem;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;}</style><pre class=\"css-rv4j2x\"><style data-emotion=\"css xbtgqu\">.css-xbtgqu{position:relative;overflow:hidden;}.css-xbtgqu::after{content:\"\";position:absolute;top:0;left:0;bottom:0;right:0;background-color:var(--accent-color);opacity:var(--accent-opacity);z-index:-1;}</style><pre class=\"prism-code language-html css-xbtgqu\" style=\"background-color:transparent;color:#bfc7d5;border-radius:1rem;padding:1.25rem\"><div class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token tag punctuation\" style=\"color:rgb(199, 146, 234)\">&lt;</span><span class=\"token tag\" style=\"color:rgb(255, 85, 114)\">div</span><span class=\"token tag\" style=\"color:rgb(255, 85, 114)\"> </span><span class=\"token tag attr-name\" style=\"color:rgb(255, 203, 107)\">class</span><span class=\"token tag attr-value punctuation\" style=\"color:rgb(199, 146, 234)\">=</span><span class=\"token tag attr-value punctuation\" style=\"color:rgb(199, 146, 234)\">&quot;</span><span class=\"token tag attr-value\" style=\"color:rgb(255, 85, 114)\">box xs-span12 md-span6 lg-span3</span><span class=\"token tag attr-value punctuation\" style=\"color:rgb(199, 146, 234)\">&quot;</span><span class=\"token tag\" style=\"color:rgb(255, 85, 114)\"> </span><span class=\"token tag punctuation\" style=\"color:rgb(199, 146, 234)\">/&gt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\" style=\"display:inline-block\"></span></div></pre></pre><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">To give credit where credit is due, I did look to Buzzfeed&#x27;s <style data-emotion=\"css 68qlq5\">.css-68qlq5{display:inline;cursor:pointer;}.css-68qlq5 a:hover{-webkit-text-decoration:underline;text-decoration:underline;}</style><span class=\"css-68qlq5\"><a href=\"https://solid.buzzfeed.com\" target=\"_blank\">Solid</a></span> to help me get the prefixing mixin off the ground.</div><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">I&#x27;ve been tryin to find better ways to organize my CSS, and this is a step in the right direction. I hope to continue to work on this in the future. Right now, this module only works with the most vanilla version of Susy (which is all I&#x27;ve really used Susy for), but I&#x27;d love for it to be more robust in the future.</div><style data-emotion=\"css 8ufjxx\">.css-8ufjxx{font-size:1rem;font-weight:400;line-height:1.5;margin-bottom:1.875rem;}.css-8ufjxx a{font-weight:700;}</style><div class=\"css-8ufjxx\">Check it out over on <style data-emotion=\"css 68qlq5\">.css-68qlq5{display:inline;cursor:pointer;}.css-68qlq5 a:hover{-webkit-text-decoration:underline;text-decoration:underline;}</style><span class=\"css-68qlq5\"><a href=\"https://github.com/seanblanton/susybricks\" target=\"_blank\">Github</a></span> if you&#x27;d like to play around with it</div>","scope":{}},"frontMatter":{"title":"Making Susy Grids Atomic","date":"7 May 2016","excerpt":"A little utility to make Susy grids work with atomic breakpoints"}},"__N_SSG":true}